<h1 class="gamut-1ewwict-Text e8i0p5k0">The Convenience of Templates</h1><p class="gamut-1xdcsrc-Text e8i0p5k0"><span data-testid="markdown" class="markdown__1eeYJ4WPKUcvX_LDDGJR12">Django makes it easier for developers to create templates!</span></p><div class="gamut-unqu21-Box-ArticleContentContainer e1xfx7rd1"><div data-testid="markdown" class="spacing-loose__3_R8mSIQ2cspwhDGkCOXTu markdown__1eeYJ4WPKUcvX_LDDGJR12 darkTheme__2i0sjr_RjoITRh35Ld2GzM gamut-gk1onf-ArticleMarkdown e1xfx7rd0"><p class="p__1qg33Igem5pAgn4kPMirjw">Django uses templates to display information to users. In conventional web development, web pages are written with HTML. But if templates were written in pure HTML then we don’t really need Django. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Rather, Django gives us <a target="_blank" rel="noopener" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://docs.djangoproject.com/en/3.1/ref/templates/language/"><em>Django Template Language</em></a> (DTL) which lets us inject variables, logic, and control flow inside of our HTML - supercharging our HTML files to do so much more than provide static content. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw"><img src="https://static-assets.codecademy.com/skillpaths/django/first_app/django_mtv_diagram_bg.svg" alt="Django's MTV design pattern showing how models supply the data, views determine what data to show, and templates displaying the data" class="img__1JGFO2nlisObc3KeOSGPRp"></p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Templates play an integral part of Django’s MTV design pattern, so you will look into finer detail, how this component relates to the overall process of creating a web app. </p>
</div></div>




<h1>Learn</h1>

<div class="gamut-1h3qpnn-Box ebnwbv90"><div aria-hidden="true" class="gamut-haybot-Text e8i0p5k0">Templates</div><span aria-hidden="true" class="gamut-yj8jvy-Text e8i0p5k0">What is a Template?</span><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">In Django, <em>templates</em> are going to be the user facing content. These templates are made mostly of HTML, and are usually just HTML files. However, Django templates usually have added <em>Django Template Language</em>, or <em>DTL</em>, modifications. We’ll be going into DTL later though, so don’t worry too much about it right now.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">In order to create templates, they have to be stored in the application in a folder called <strong>templates/</strong>. Another folder needs to be created inside of this <strong>templates/</strong> folder that uses the same name of the application. All of the templates will go into this folder named after the application. The full file path to a template should look like this:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">projectname/</span></span><br><span><span class="mtk1"> |-- appname/</span></span><br><span><span class="mtk1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|-- templates/</span></span><br><span><span class="mtk1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|-- appname/</span></span><br><span><span class="mtk1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|-- first_template.html</span></span><br></div></code></pre></pre><p class="p__1qg33Igem5pAgn4kPMirjw">In this lesson we’ll go over creating templates and getting the full use of the DTL inside of those templates to make it easier to design the front end of any Django application.</p>
</div></div></div>


<h3>Solution</h3>




<h1>Learn</h1>

<div class="gamut-1h3qpnn-Box ebnwbv90"><div aria-hidden="true" class="gamut-haybot-Text e8i0p5k0">Templates</div><span aria-hidden="true" class="gamut-yj8jvy-Text e8i0p5k0">Revisiting Our First Template</span><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">The first template usually made is the homepage of the application. Templates can be plain HTML files and are stored inside of <strong>appname/templates/appname/</strong>. While the template can usually be left as a normal HTML file, most of the time <em>Django Template Language</em> or <em>DTL</em> will be added to the template to assist with the creation of the application. If you want to go into more detail regarding how to build the application using plain HTML, check out our <a target="_blank" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://www.codecademy.com/learn/learn-html">course here</a>. Please note that this lesson will be using DTL and HTML throughout the exercises.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">When any template is referenced later, it will be done by calling <code class="code__2rdF32qjRVp7mMVBHuPwDS">appname/template_name.html</code>. This is to help the Django engine find the template because DTL will not look in any sub folders in the template folder for files.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Once the template is made, some of the code in <strong>views.py</strong> will have to be modified in order to <em>render</em> the template. Rendering the template is the Django application taking the template and displaying it as a normal HTML page in a web browser.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Inside of <strong>views.py</strong>, we need functions, or classes, that tell the template what information to include. For example, one function (<code class="code__2rdF32qjRVp7mMVBHuPwDS">homepage()</code>) will be created that takes in one parameter called <code class="code__2rdF32qjRVp7mMVBHuPwDS">request</code>. The <code class="code__2rdF32qjRVp7mMVBHuPwDS">homepage()</code> function will return another function called <code class="code__2rdF32qjRVp7mMVBHuPwDS">render()</code> that takes two arguments. The first being the <code class="code__2rdF32qjRVp7mMVBHuPwDS">request</code> that gets passed into <code class="code__2rdF32qjRVp7mMVBHuPwDS">homepage()</code>, and the name of the template. Just as a refresher, the final method in <strong>views.py</strong> should look like the one below:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-python" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk12">def homepage</span><span class="mtk1">(</span><span class="mtk9">request</span><span class="mtk1">):</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk12">return</span><span class="mtk1"> </span><span class="mtk9">render</span><span class="mtk1">(</span><span class="mtk9">request</span><span class="mtk1">, </span><span class="mtk8">"app_name/sample_template.html"</span><span class="mtk1">)</span></span><br></div></code></pre></pre>
<p class="p__1qg33Igem5pAgn4kPMirjw">These modifications to <strong>views.py</strong> will be covered in more detail in a later lesson. In this lesson, the code for <strong>views.py</strong> will be provided so that we can focus primarily on templates and not the views.</p>
</div></div></div>


<h3>Instructions</h3>

<div><div aria-hidden="false"><div class="checkpoint__Mmv3yv-wu7NJCX0vgcy0h" data-testid="checkpoint-satisfied"><b class="checkpointNumber__P9kFWzdu5a6M0jcG_LgjT">1.</b><div class="checkpointBody__3Sn4jghNHiScLJ7-zmcXUk"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw"><strong>Note:</strong> To save you some work and time, we’ve reorganized the structure of our Django project to have you automatically working in the root folder. We’ve also made it so your development server is automatically running! </p>
<p class="p__1qg33Igem5pAgn4kPMirjw"><strong>home.html</strong> is opened in the code editor, notice that it’s now empty. That’s because we will be building this from scratch with DTL in mind. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">For now, add a heading (<code class="code__2rdF32qjRVp7mMVBHuPwDS">&lt;h1&gt;</code>) that says <code class="code__2rdF32qjRVp7mMVBHuPwDS">Welcome to Vet Office!</code> and a paragraph (<code class="code__2rdF32qjRVp7mMVBHuPwDS">&lt;p&gt;</code>) that says <code class="code__2rdF32qjRVp7mMVBHuPwDS">Welcome!</code>. Don’t worry, everything else will be added back later.</p>
</div></div></div><div class="checkpointCheckbox__vmGdbkCMW4Z7ET3KCrCJP checkboxSatisfied__1xX8YQAWCZp7OxlyblPKiC"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 2 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div></div>


<h3>Solution</h3>




<h1>Learn</h1>

<div class="gamut-1h3qpnn-Box ebnwbv90"><div aria-hidden="true" class="gamut-haybot-Text e8i0p5k0">Templates</div><span aria-hidden="true" class="gamut-yj8jvy-Text e8i0p5k0">Creating a Base Template</span><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">We’ve now created a simple home page, but we’re missing some elements like a helpful a navigation bar to move around the application. An basic navigation bar looks like the following. (Please note that we’ll be ignoring CSS for now)</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-html" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk4">&lt;div</span><span class="mtk1"> </span><span class="mtk7">class</span><span class="mtk1">=</span><span class="mtk8">"topnav"</span><span class="mtk1"> </span><span class="mtk7">id</span><span class="mtk1">=</span><span class="mtk8">"pageTopNav"</span><span class="mtk4">&gt;</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk4">&lt;a</span><span class="mtk1"> </span><span class="mtk7">href</span><span class="mtk1">=</span><span class="mtk8">"#home"</span><span class="mtk1"> </span><span class="mtk7">class</span><span class="mtk1">=</span><span class="mtk8">"active"</span><span class="mtk4">&gt;</span><span class="mtk1">Home</span><span class="mtk4">&lt;/a&gt;</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk4">&lt;a</span><span class="mtk1"> </span><span class="mtk7">href</span><span class="mtk1">=</span><span class="mtk8">"#contact"</span><span class="mtk4">&gt;</span><span class="mtk1">Contact</span><span class="mtk4">&lt;/a&gt;</span></span><br><span><span class="mtk4">&lt;/div&gt;</span></span><br></div></code></pre></pre>
<p class="p__1qg33Igem5pAgn4kPMirjw">Now imagine if we included even more links, this navigation bar could grow really large! This means each page that contains this code would continue to grow along with it. Django solves this issue of copying and pasting the same reused code from each template into something one template called a <em>base template</em>. Some elements that might go into the base template are: headings, navigation bars, footers, etc — these elements show up on most, if not all of the web pages for the application. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">A base template is created the same way as a normal template, starting with an HTML file. By convention, the base template is usually called something like <strong>base.html</strong> or <strong>base_template.html</strong>. For this lesson, we’ll be using <strong>base.html</strong> as the name.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Once the common elements have been moved to <strong>base.html</strong>, we can start talking about adding page-specific content. Since the <strong>base.html</strong> will be used across several templates, we need to tell the application where we want our page-specific content to go. To do this, we add <em>tags</em> to the body of the base template. Tags are used to help extend the base template to other templates. We’ll be going over this in more detail in another exercise, but for now, we just need to know that tags are created using the <code class="code__2rdF32qjRVp7mMVBHuPwDS">{%</code> and <code class="code__2rdF32qjRVp7mMVBHuPwDS">%}</code> symbols. Inside of these tags, we’ll be adding <code class="code__2rdF32qjRVp7mMVBHuPwDS">block content</code>, and later another tag with the content <code class="code__2rdF32qjRVp7mMVBHuPwDS">endblock</code>. This creates a block that we can add code to in other templates. This block gives us the ability to later insert content that is specific to individual pages. It should look like this:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-html" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">{% block content %}</span></span><br><span><span> </span></span><br><span><span class="mtk1">{% endblock %}</span></span><br></div></code></pre></pre>
<p class="p__1qg33Igem5pAgn4kPMirjw">Typically only page-specific content will go inside of these tags and is added from other templates. These blocks are usually left empty in the base template though. Multiple blocks can be created within the base template and then used in other templates. Blocks can be put anywhere within the base template. This is because not everything page-specific will necessarily go in the body.</p>
</div></div></div>


<h3>Instructions</h3>

<div><div aria-hidden="false"><div class="checkpoint__Mmv3yv-wu7NJCX0vgcy0h" data-testid="checkpoint-satisfied"><b class="checkpointNumber__P9kFWzdu5a6M0jcG_LgjT">1.</b><div class="checkpointBody__3Sn4jghNHiScLJ7-zmcXUk"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">Inside of the new template <strong>base.html</strong>, add the following HTML elements: </p>
<ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">the <code class="code__2rdF32qjRVp7mMVBHuPwDS">&lt;!DOCTYPE html&gt;</code> </li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">the <code class="code__2rdF32qjRVp7mMVBHuPwDS">&lt;html&gt;</code> element with two elements nested inside:<ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">the <code class="code__2rdF32qjRVp7mMVBHuPwDS">&lt;head&gt;</code> element </li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">the <code class="code__2rdF32qjRVp7mMVBHuPwDS">&lt;body&gt;</code> element </li>
</ul>
</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">a heading (<code class="code__2rdF32qjRVp7mMVBHuPwDS">&lt;h1&gt;</code>) to the body that says <code class="code__2rdF32qjRVp7mMVBHuPwDS">Welcome to Vet Office!</code></li>
</ul>
</div></div></div><div class="checkpointCheckbox__vmGdbkCMW4Z7ET3KCrCJP checkboxSatisfied__1xX8YQAWCZp7OxlyblPKiC"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 2 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div><div aria-hidden="false"><div class="checkpoint__Mmv3yv-wu7NJCX0vgcy0h" data-testid="checkpoint-satisfied"><b class="checkpointNumber__P9kFWzdu5a6M0jcG_LgjT">2.</b><div class="checkpointBody__3Sn4jghNHiScLJ7-zmcXUk"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">After the heading (<code class="code__2rdF32qjRVp7mMVBHuPwDS">&lt;h1&gt;</code>) element, add a set of <code class="code__2rdF32qjRVp7mMVBHuPwDS">{% block content %}</code> and <code class="code__2rdF32qjRVp7mMVBHuPwDS">{% endblock %}</code> tags to the body of the <strong>base.html</strong> document. </p>
</div></div></div><div class="checkpointCheckbox__vmGdbkCMW4Z7ET3KCrCJP checkboxSatisfied__1xX8YQAWCZp7OxlyblPKiC"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 3 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div></div></div>


<h3>Solution</h3>




<h1>Learn</h1>

<div class="gamut-1h3qpnn-Box ebnwbv90"><div aria-hidden="true" class="gamut-haybot-Text e8i0p5k0">Templates</div><span aria-hidden="true" class="gamut-yj8jvy-Text e8i0p5k0">Extending the Base Template</span><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">With our base template created, we can <em>refactor</em> our other templates by removing the common elements. Let’s say we wanted to refactor a template for an <code class="code__2rdF32qjRVp7mMVBHuPwDS">about/</code> page, it might look like:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-html" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk4">&lt;p&gt;</span><span class="mtk1">Welcome to your local veterinarian's office!</span><span class="mtk4">&lt;/p&gt;</span></span><br><span><span> </span></span><br><span><span class="mtk4">&lt;p&gt;</span><span class="mtk1">Feel free to call us at 123-456-7890!</span><span class="mtk4">&lt;/p&gt;</span></span><br></div></code></pre></pre>
<p class="p__1qg33Igem5pAgn4kPMirjw">To use our base template in other templates, we need to include <code class="code__2rdF32qjRVp7mMVBHuPwDS">{% extends "appname/base.html" %}</code> at the top of our <code class="code__2rdF32qjRVp7mMVBHuPwDS">about/</code> page template:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-html" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">{% extends "vetoffice/base.html" %}</span></span><br><span><span> </span></span><br><span><span class="mtk4">&lt;p&gt;</span><span class="mtk1"> We're all about caring for pets!</span><span class="mtk4">&lt;/p&gt;</span></span><br><span><span class="mtk4">&lt;p&gt;</span><span class="mtk1"> Contact us at: 123-456-7890 </span><span class="mtk4">&lt;/p&gt;</span></span><br></div></code></pre></pre>
<p class="p__1qg33Igem5pAgn4kPMirjw">But this code isn’t complete, we still need to tell our <strong>base.html</strong> what block of content to include. This can be done by adding two tags to our document before and after the paragraphs that says <code class="code__2rdF32qjRVp7mMVBHuPwDS">block content</code> and <code class="code__2rdF32qjRVp7mMVBHuPwDS">endblock</code>.</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-html" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">{% extends "vetoffice/base.html" %}</span></span><br><span><span> </span></span><br><span><span class="mtk1">{% block content %}</span></span><br><span><span class="mtk4">&lt;p&gt;</span><span class="mtk1">This will go inside the body</span><span class="mtk4">&lt;/p&gt;</span></span><br><span><span> </span></span><br><span><span class="mtk4">&lt;p&gt;</span><span class="mtk1">This will also be inside the body</span><span class="mtk4">&lt;/p&gt;</span></span><br><span><span class="mtk1">{% endblock %}</span></span><br></div></code></pre></pre>
<p class="p__1qg33Igem5pAgn4kPMirjw">Notice that all we had to do was add three lines of DTL, and all of our HTML from our base template is now added to the template.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Now that that both templates are set up, all of our common code can go inside of <strong>base.html</strong>, and any page-specific content can go inside of <strong>template.html</strong>. This will help with not only keeping the code organized, but also help make the code cleaner as we’ll only be seeing page-specific content in the templates from now on.</p>
</div></div></div>


<h3>Instructions</h3>

<div><div aria-hidden="false"><div class="checkpoint__Mmv3yv-wu7NJCX0vgcy0h" data-testid="checkpoint-satisfied"><b class="checkpointNumber__P9kFWzdu5a6M0jcG_LgjT">1.</b><div class="checkpointBody__3Sn4jghNHiScLJ7-zmcXUk"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">Inside of <strong>home.html</strong>, remove the heading (<code class="code__2rdF32qjRVp7mMVBHuPwDS">&lt;h1&gt;</code>) element but keep the paragraph (<code class="code__2rdF32qjRVp7mMVBHuPwDS">&lt;p&gt;</code>) element.</p>
</div></div></div><div class="checkpointCheckbox__vmGdbkCMW4Z7ET3KCrCJP checkboxSatisfied__1xX8YQAWCZp7OxlyblPKiC"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 2 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div></div><div aria-hidden="false"><div class="checkpoint__Mmv3yv-wu7NJCX0vgcy0h" data-testid="checkpoint-satisfied"><b class="checkpointNumber__P9kFWzdu5a6M0jcG_LgjT">2.</b><div class="checkpointBody__3Sn4jghNHiScLJ7-zmcXUk"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">Extend <strong>vetoffice/base.html</strong> to <strong>home.html</strong> using tags so that all of the content can be displayed later from <strong>base.html</strong>. </p>
</div></div></div><div class="checkpointCheckbox__vmGdbkCMW4Z7ET3KCrCJP checkboxSatisfied__1xX8YQAWCZp7OxlyblPKiC"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 3 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div><div aria-hidden="false"><div class="checkpoint__Mmv3yv-wu7NJCX0vgcy0h" data-testid="checkpoint-satisfied"><b class="checkpointNumber__P9kFWzdu5a6M0jcG_LgjT">3.</b><div class="checkpointBody__3Sn4jghNHiScLJ7-zmcXUk"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">Add the blocks to the code that will let us add the current page content to the base template. This should be one tag before the paragraph element and one tag after the paragraph element.</p>
</div></div></div><div class="checkpointCheckbox__vmGdbkCMW4Z7ET3KCrCJP checkboxSatisfied__1xX8YQAWCZp7OxlyblPKiC"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 4 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div></div>


<h3>Solution</h3>




<h1>Learn</h1>

<div class="gamut-1h3qpnn-Box ebnwbv90"><div aria-hidden="true" class="gamut-haybot-Text e8i0p5k0">Templates</div><span aria-hidden="true" class="gamut-yj8jvy-Text e8i0p5k0">Adding CSS to the Templates</span><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">In most applications, HTML files will usually use a CSS file to modify how the webpage looks. While we won’t be covering CSS specifically in this exercise, we will be covering how to add CSS files to our templates as the process is different in Django templates compared to a normal HTML document. To learn more about CSS, we recommend our <a target="_blank" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://www.codecademy.com/learn/learn-css">Learn CSS course</a>.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">We need a folder to store our CSS files, this folder will be in the application’s main folder and called <strong>static/</strong>. This folder will hold assets like pictures and CSS files. Another folder will be created inside of <strong>static/</strong> that will be named after our application. The full path should look like the one below:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">projectname/</span></span><br><span><span class="mtk1"> |-- appname/</span></span><br><span><span class="mtk1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|-- templates/</span></span><br><span><span class="mtk1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|-- static/</span></span><br><span><span class="mtk1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|-- appname/</span></span><br><span><span class="mtk1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|-- file.css</span></span><br></div></code></pre></pre><p class="p__1qg33Igem5pAgn4kPMirjw">Once a CSS file is added to <strong>static/appname</strong>, it can be referenced within our templates inside of blocks formed in the <strong>base.html</strong> <code class="code__2rdF32qjRVp7mMVBHuPwDS">&lt;head&gt;</code> elements. This is because static files will not be passed down to children of the <strong>base.html</strong> template. The files in our <strong>static/</strong> folder should be loaded in the <code class="code__2rdF32qjRVp7mMVBHuPwDS">&lt;header&gt;</code>. Therefore, we’ll add another block tag, like so: </p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-html" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk16">&lt;!-- base.html --&gt;</span></span><br><span><span class="mtk16">&lt;!DOCTYPE html&gt;</span></span><br><span><span class="mtk4">&lt;head&gt;</span></span><br><span><span class="mtk1">&nbsp;&nbsp;{% block head %}</span></span><br><span><span> </span></span><br><span><span class="mtk1">&nbsp;&nbsp;{% endblock %}</span></span><br><span><span class="mtk4">&lt;/head&gt;</span></span><br><span><span class="mtk1">...</span></span><br></div></code></pre></pre>
<p class="p__1qg33Igem5pAgn4kPMirjw">Inside of the template we’ll be using, we first need to load in static files. This is typically done at the beginning of the file after extending from <strong>base.html</strong>. This will let us access all of our static files later. Then the block created from <strong>base.html</strong> can be added to the document. This is the block where the CSS will be loaded in. This is done by loading a CSS file as normal, except setting the <code class="code__2rdF32qjRVp7mMVBHuPwDS">href</code> to a tag that says <code class="code__2rdF32qjRVp7mMVBHuPwDS">{% static 'appname/file.css' %}</code>. It should look like the code below.</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-html" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk16">&lt;!-- template_example.html --&gt;</span></span><br><span><span class="mtk1">{% load static %}</span></span><br><span><span> </span></span><br><span><span class="mtk1">{% block head %}</span></span><br><span><span class="mtk4">&lt;link</span><span class="mtk1"> </span><span class="mtk7">rel</span><span class="mtk1">=</span><span class="mtk8">"stylesheet"</span><span class="mtk1"> </span><span class="mtk7">href</span><span class="mtk1">=</span><span class="mtk8">"{% static 'appname/file.css' %}"</span><span class="mtk4">&gt;</span></span><br><span><span class="mtk1">{% endblock %}</span></span><br></div></code></pre></pre>
</div></div></div>


<h3>Instructions</h3>

<div><div aria-hidden="false"><div class="checkpoint__Mmv3yv-wu7NJCX0vgcy0h" data-testid="checkpoint-satisfied"><b class="checkpointNumber__P9kFWzdu5a6M0jcG_LgjT">1.</b><div class="checkpointBody__3Sn4jghNHiScLJ7-zmcXUk"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">Let’s go ahead and set up our folders and CSS file by doing the following:</p>
<ol class="ol__1XI8Ausmo9cwwog3NvDzWF">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">In the <strong>vetoffice/</strong> folder, add a <strong>static/</strong> folder.</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">In the created <strong>static/</strong> folder, add another folder named <strong>vetoffice/</strong>.</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">In the newly added <strong>vetoffice/</strong>, add a CSS file called <strong>style.css</strong>. </li>
</ol>
<p class="p__1qg33Igem5pAgn4kPMirjw">Now that we have our <strong>style.css</strong> created, go ahead and change every <code class="code__2rdF32qjRVp7mMVBHuPwDS">&lt;p&gt;</code> element to have red text color with the following:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-css" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk4">p</span><span class="mtk9"> </span><span class="mtk1">{</span></span><br><span><span class="mtk9">&nbsp;&nbsp;</span><span class="mtk10">color</span><span class="mtk1">:</span><span class="mtk9"> </span><span class="mtk12">red</span><span class="mtk1">;</span></span><br><span><span class="mtk1">}</span></span><br></div></code></pre></pre>
</div></div></div><div class="checkpointCheckbox__vmGdbkCMW4Z7ET3KCrCJP checkboxSatisfied__1xX8YQAWCZp7OxlyblPKiC"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 2 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div><div aria-hidden="false"><div class="checkpoint__Mmv3yv-wu7NJCX0vgcy0h" data-testid="checkpoint-satisfied"><b class="checkpointNumber__P9kFWzdu5a6M0jcG_LgjT">2.</b><div class="checkpointBody__3Sn4jghNHiScLJ7-zmcXUk"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">Inside of <strong>base.html</strong>, add a block to the head (<code class="code__2rdF32qjRVp7mMVBHuPwDS">&lt;head&gt;</code>) element that’s called <code class="code__2rdF32qjRVp7mMVBHuPwDS">head</code>. Add the end of the block inside of the head element as well.</p>
</div></div></div><div class="checkpointCheckbox__vmGdbkCMW4Z7ET3KCrCJP checkboxSatisfied__1xX8YQAWCZp7OxlyblPKiC"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 3 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div><div aria-hidden="false"><div class="checkpoint__Mmv3yv-wu7NJCX0vgcy0h" data-testid="checkpoint-satisfied"><b class="checkpointNumber__P9kFWzdu5a6M0jcG_LgjT">3.</b><div class="checkpointBody__3Sn4jghNHiScLJ7-zmcXUk"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw"><strong>base.html</strong> is now expecting some information from any file that extends it (like <strong>home.html</strong>). So, let’s now set up <strong>home.html</strong>:</p>
<ol class="ol__1XI8Ausmo9cwwog3NvDzWF">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Inside of <strong>home.html</strong>, load in static files under where <strong>base.html</strong> is extended from. </li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Add a <code class="code__2rdF32qjRVp7mMVBHuPwDS">head</code> block that will be used to fill in <strong>base.html</strong>‘s own <code class="code__2rdF32qjRVp7mMVBHuPwDS">head</code> block. </li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Inside your new <code class="code__2rdF32qjRVp7mMVBHuPwDS">head</code> block, add a <code class="code__2rdF32qjRVp7mMVBHuPwDS">&lt;link&gt;</code> with an <code class="code__2rdF32qjRVp7mMVBHuPwDS">href</code> set to <strong>style.css</strong> using a tag (<code class="code__2rdF32qjRVp7mMVBHuPwDS">{% %}</code>).</li>
</ol>
</div></div></div><div class="checkpointCheckbox__vmGdbkCMW4Z7ET3KCrCJP checkboxSatisfied__1xX8YQAWCZp7OxlyblPKiC"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 4 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div></div>


<h3>Solution</h3>




<h1>Learn</h1>

<div class="gamut-1h3qpnn-Box ebnwbv90"><div aria-hidden="true" class="gamut-haybot-Text e8i0p5k0">Templates</div><span aria-hidden="true" class="gamut-yj8jvy-Text e8i0p5k0">Variables in Templates</span><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">Let’s explore this <em>Django Template Language</em>, or <em>DTL</em>, we’ve been using in the previous exercises. DTL, as its name implies, is a template language created specifically for Django. Its primary purpose is to help reduce the amount of code necessary for running a webpage. We’ve seen how DTL can extend templates and load in CSS files. But, DTL can do so much more for us, like grabbing variables from <strong>views.py</strong>, creating loops, <code class="code__2rdF32qjRVp7mMVBHuPwDS">if</code> statements, and more! In this exercise, we’ll start with creating variables. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">We’ll cover the specifics of how views provide variables for templates in a later lesson. For now, we’ll just review the syntax for evaluating variables — two symbols are needed, <code class="code__2rdF32qjRVp7mMVBHuPwDS">{{</code> and <code class="code__2rdF32qjRVp7mMVBHuPwDS">}}</code>, we call these symbols <em>variable tags</em>. When we add a variable in between variable tags, Django knows that we want the value of that variable from our <strong>views.py</strong> file. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">For example, if we had an application that wanted to output a specific username, we would add our variable tags with the variable name inside of these tags, that being <code class="code__2rdF32qjRVp7mMVBHuPwDS">username</code>:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-html" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk4">&lt;p&gt;</span><span class="mtk1">{{ username }}</span><span class="mtk4">&lt;/p&gt;</span></span><br></div></code></pre></pre>
<p class="p__1qg33Igem5pAgn4kPMirjw">Dictionaries and variable tags work well together. In a single variable tag, we can grab a dictionary and access all its properties! Imagine if we stored our user’s information in a dictionary named <code class="code__2rdF32qjRVp7mMVBHuPwDS">user</code>: </p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-html" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk4">&lt;p&gt;</span><span class="mtk1">{{ users.username }}</span><span class="mtk4">&lt;/p&gt;</span></span><br></div></code></pre></pre>
<p class="p__1qg33Igem5pAgn4kPMirjw">Notice we’re able to use dot notation to access the <code class="code__2rdF32qjRVp7mMVBHuPwDS">.username</code> property of <code class="code__2rdF32qjRVp7mMVBHuPwDS">user</code>. In an actual app, there should be more properties we can access. We’ll cover how to access each individual property later when we discuss DTL loops but now it’s time to practice using variable tags. </p>
</div></div></div>


<h3>Instructions</h3>

<div><div aria-hidden="false"><div class="checkpoint__Mmv3yv-wu7NJCX0vgcy0h" data-testid="checkpoint-satisfied"><b class="checkpointNumber__P9kFWzdu5a6M0jcG_LgjT">1.</b><div class="checkpointBody__3Sn4jghNHiScLJ7-zmcXUk"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">Inside of <strong>home.html</strong>, edit the <code class="code__2rdF32qjRVp7mMVBHuPwDS">&lt;p&gt;</code> inside of the content block that says <code class="code__2rdF32qjRVp7mMVBHuPwDS">Welcome, ~value of name~!</code>. Replace <code class="code__2rdF32qjRVp7mMVBHuPwDS">~value of name~</code> with a variable tag that uses the <code class="code__2rdF32qjRVp7mMVBHuPwDS">name</code> variable.</p>
</div></div></div><div class="checkpointCheckbox__vmGdbkCMW4Z7ET3KCrCJP checkboxSatisfied__1xX8YQAWCZp7OxlyblPKiC"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 2 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div></div>


<h3>Solution</h3>




<h1>Learn</h1>

<div class="gamut-1h3qpnn-Box ebnwbv90"><div aria-hidden="true" class="gamut-haybot-Text e8i0p5k0">Templates</div><span aria-hidden="true" class="gamut-yj8jvy-Text e8i0p5k0">Variables in Templates</span><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">Let’s explore this <em>Django Template Language</em>, or <em>DTL</em>, we’ve been using in the previous exercises. DTL, as its name implies, is a template language created specifically for Django. Its primary purpose is to help reduce the amount of code necessary for running a webpage. We’ve seen how DTL can extend templates and load in CSS files. But, DTL can do so much more for us, like grabbing variables from <strong>views.py</strong>, creating loops, <code class="code__2rdF32qjRVp7mMVBHuPwDS">if</code> statements, and more! In this exercise, we’ll start with creating variables. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">We’ll cover the specifics of how views provide variables for templates in a later lesson. For now, we’ll just review the syntax for evaluating variables — two symbols are needed, <code class="code__2rdF32qjRVp7mMVBHuPwDS">{{</code> and <code class="code__2rdF32qjRVp7mMVBHuPwDS">}}</code>, we call these symbols <em>variable tags</em>. When we add a variable in between variable tags, Django knows that we want the value of that variable from our <strong>views.py</strong> file. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">For example, if we had an application that wanted to output a specific username, we would add our variable tags with the variable name inside of these tags, that being <code class="code__2rdF32qjRVp7mMVBHuPwDS">username</code>:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-html" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk4">&lt;p&gt;</span><span class="mtk1">{{ username }}</span><span class="mtk4">&lt;/p&gt;</span></span><br></div></code></pre></pre>
<p class="p__1qg33Igem5pAgn4kPMirjw">Dictionaries and variable tags work well together. In a single variable tag, we can grab a dictionary and access all its properties! Imagine if we stored our user’s information in a dictionary named <code class="code__2rdF32qjRVp7mMVBHuPwDS">user</code>: </p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-html" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk4">&lt;p&gt;</span><span class="mtk1">{{ users.username }}</span><span class="mtk4">&lt;/p&gt;</span></span><br></div></code></pre></pre>
<p class="p__1qg33Igem5pAgn4kPMirjw">Notice we’re able to use dot notation to access the <code class="code__2rdF32qjRVp7mMVBHuPwDS">.username</code> property of <code class="code__2rdF32qjRVp7mMVBHuPwDS">user</code>. In an actual app, there should be more properties we can access. We’ll cover how to access each individual property later when we discuss DTL loops but now it’s time to practice using variable tags. </p>
</div></div></div>


<h3>Instructions</h3>

<div><div aria-hidden="false"><div class="checkpoint__Mmv3yv-wu7NJCX0vgcy0h" data-testid="checkpoint-satisfied"><b class="checkpointNumber__P9kFWzdu5a6M0jcG_LgjT">1.</b><div class="checkpointBody__3Sn4jghNHiScLJ7-zmcXUk"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">Inside of <strong>home.html</strong>, edit the <code class="code__2rdF32qjRVp7mMVBHuPwDS">&lt;p&gt;</code> inside of the content block that says <code class="code__2rdF32qjRVp7mMVBHuPwDS">Welcome, ~value of name~!</code>. Replace <code class="code__2rdF32qjRVp7mMVBHuPwDS">~value of name~</code> with a variable tag that uses the <code class="code__2rdF32qjRVp7mMVBHuPwDS">name</code> variable.</p>
</div></div></div><div class="checkpointCheckbox__vmGdbkCMW4Z7ET3KCrCJP checkboxSatisfied__1xX8YQAWCZp7OxlyblPKiC"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 2 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div></div>


<h3>Solution</h3>




<h1>Learn</h1>

<div class="gamut-1h3qpnn-Box ebnwbv90"><div aria-hidden="true" class="gamut-haybot-Text e8i0p5k0">Templates</div><span aria-hidden="true" class="gamut-yj8jvy-Text e8i0p5k0">Loops in Templates</span><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">When dealing with a dictionary in a Django template, we can save time by taking advantage of DTL’s <code class="code__2rdF32qjRVp7mMVBHuPwDS">for</code> loop to iterate over individual items. Loops in DTL work like regular Python <code class="code__2rdF32qjRVp7mMVBHuPwDS">for</code> loops but still require tags. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">To write a loop in DTL we’ll need to use our tags <code class="code__2rdF32qjRVp7mMVBHuPwDS">{%</code> <code class="code__2rdF32qjRVp7mMVBHuPwDS">%}</code> and insert the syntax for a <code class="code__2rdF32qjRVp7mMVBHuPwDS">for</code> loop. The syntax to start a <code class="code__2rdF32qjRVp7mMVBHuPwDS">for</code> loop requires:</p>
<ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">The <code class="code__2rdF32qjRVp7mMVBHuPwDS">for</code> keyword.</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">The name of the new variables we’ll be creating in the loop.</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">An indicator saying <code class="code__2rdF32qjRVp7mMVBHuPwDS">in</code></li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">The list we’ll be using in the loop.</li>
</ul>
<p class="p__1qg33Igem5pAgn4kPMirjw">Those will all be listed out in that order, and will be followed with an <code class="code__2rdF32qjRVp7mMVBHuPwDS">{% endfor %}</code> at the end of the loop. The loop syntax looks like:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-html" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">{% for item in list_name %}</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk4">&lt;p&gt;</span><span class="mtk1">{{ item }}</span><span class="mtk4">&lt;/p&gt;</span></span><br><span><span class="mtk1">{% endfor %}</span></span><br></div></code></pre></pre>
<p class="p__1qg33Igem5pAgn4kPMirjw">Inside the loop’s body, during each iteration, we can access the current key using the temporary variable <code class="code__2rdF32qjRVp7mMVBHuPwDS">key</code> inside variable tags <code class="code__2rdF32qjRVp7mMVBHuPwDS">{{</code> <code class="code__2rdF32qjRVp7mMVBHuPwDS">}}</code>. We’re free to manipulate the key as a variable using standard Python syntax. If our list contains dictionaries, we could even access the <code class="code__2rdF32qjRVp7mMVBHuPwDS">value</code> of our dictionary if we change our loop:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-html" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">{% for key, value in dictionary_list %}</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk4">&lt;p&gt;</span><span class="mtk1">{{ key }} :&nbsp;{{ value }}</span><span class="mtk4">&lt;/p&gt;</span></span><br><span><span class="mtk1">{% endfor %}</span></span><br></div></code></pre></pre>
<p class="p__1qg33Igem5pAgn4kPMirjw">Using loops, we can greatly reduce the amount of HTML we need to write to display a lot of information! </p>
</div></div></div>


<h3>Instructions</h3>

<div><div aria-hidden="false"><div class="checkpoint__Mmv3yv-wu7NJCX0vgcy0h" data-testid="checkpoint-satisfied"><b class="checkpointNumber__P9kFWzdu5a6M0jcG_LgjT">1.</b><div class="checkpointBody__3Sn4jghNHiScLJ7-zmcXUk"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">In <strong>views.py</strong>, we’re passing a list of dictionaries (<code class="code__2rdF32qjRVp7mMVBHuPwDS">pets</code>) to the <code class="code__2rdF32qjRVp7mMVBHuPwDS">"home.html"</code> template. We can loop through this list to display all the pets’ information on the page. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">First, navigate to <strong>home.html</strong>, and inside this template:</p>
<ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Create a <code class="code__2rdF32qjRVp7mMVBHuPwDS">{% for %}</code> loop that:<ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">has a temporary variable of <code class="code__2rdF32qjRVp7mMVBHuPwDS">pet</code></li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">loops through <code class="code__2rdF32qjRVp7mMVBHuPwDS">pets</code></li>
</ul>
</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Add the <code class="code__2rdF32qjRVp7mMVBHuPwDS">{% endfor %}</code> tag as well</li>
</ul>
</div></div></div><div class="checkpointCheckbox__vmGdbkCMW4Z7ET3KCrCJP checkboxSatisfied__1xX8YQAWCZp7OxlyblPKiC"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 2 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div><div aria-hidden="false"><div class="checkpoint__Mmv3yv-wu7NJCX0vgcy0h" data-testid="checkpoint-satisfied"><b class="checkpointNumber__P9kFWzdu5a6M0jcG_LgjT">2.</b><div class="checkpointBody__3Sn4jghNHiScLJ7-zmcXUk"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">Inside of the loop, add a <code class="code__2rdF32qjRVp7mMVBHuPwDS">&lt;p&gt;</code> element that displays the pet’s name and the type of animal, separated by a colon. For example, we would want it to look like this: “Oreo: dog”.</p>
</div></div></div><div class="checkpointCheckbox__vmGdbkCMW4Z7ET3KCrCJP checkboxSatisfied__1xX8YQAWCZp7OxlyblPKiC"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 3 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div></div>


<h3>Solution</h3>




<h1>Learn</h1>

<div class="gamut-1h3qpnn-Box ebnwbv90"><div aria-hidden="true" class="gamut-haybot-Text e8i0p5k0">Templates</div><span aria-hidden="true" class="gamut-yj8jvy-Text e8i0p5k0">Adding URLs to a Template</span><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">When navigating between pages using HTML, we need the entire URL to be written out in a <a target="_blank" rel="noopener" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a"><code class="code__2rdF32qjRVp7mMVBHuPwDS">&lt;a&gt;</code> element’s</a> <code class="code__2rdF32qjRVp7mMVBHuPwDS">href</code> attribute. With Django, rather than using the full URL we get a shortcut by using tags and the name of predefined paths! Later on, we’ll also cover how to pass along data in the URL, however, let’s first see the basic shortcut in action:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-html" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk4">&lt;a</span><span class="mtk1"> </span><span class="mtk7">href</span><span class="mtk1">=</span><span class="mtk8">"{% url 'path_name' %}"</span><span class="mtk4">&gt;</span><span class="mtk1">Sample link</span><span class="mtk4">&lt;/a&gt;</span></span><br></div></code></pre></pre>
<p class="p__1qg33Igem5pAgn4kPMirjw">As can be seen above, the link looks very similar to a typical HTML link, except we modify the <code class="code__2rdF32qjRVp7mMVBHuPwDS">href</code> to be set to a tag much like we did with CSS files. This tag is set to the type <code class="code__2rdF32qjRVp7mMVBHuPwDS">url</code> followed by the path name as a string.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">When a path requires arguments to get to, like a username, it can be added to the <code class="code__2rdF32qjRVp7mMVBHuPwDS">href</code> after the path. We won’t go into detail regarding this, but it would look like this:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-html" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk4">&lt;a</span><span class="mtk1"> </span><span class="mtk7">href</span><span class="mtk1">=</span><span class="mtk8">"{% url 'path_name' username %}"</span><span class="mtk4">&gt;</span><span class="mtk1">User Profile</span><span class="mtk4">&lt;/a&gt;</span></span><br></div></code></pre></pre>
<p class="p__1qg33Igem5pAgn4kPMirjw">In this case, arguments provide additional information to the URL to access more specific pages. Some DTL functions require arguments while they can be optional in other places. The URL is a good instance of where arguments are optional, but not necessary unless the path has an argument. We’ll discuss arguments more in the next exercise.</p>
</div></div></div>


<h3>Instructions</h3>

<div><div aria-hidden="false"><div class="checkpoint__Mmv3yv-wu7NJCX0vgcy0h" data-testid="checkpoint-satisfied"><b class="checkpointNumber__P9kFWzdu5a6M0jcG_LgjT">1.</b><div class="checkpointBody__3Sn4jghNHiScLJ7-zmcXUk"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">Notice that in <strong>urls.py</strong> we have a path for the home page with a <code class="code__2rdF32qjRVp7mMVBHuPwDS">name</code> of <code class="code__2rdF32qjRVp7mMVBHuPwDS">"home"</code>.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Now, navigate to <strong>base.html</strong>. Inside the <code class="code__2rdF32qjRVp7mMVBHuPwDS">&lt;body&gt;</code> element:</p>
<ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Add an <code class="code__2rdF32qjRVp7mMVBHuPwDS">&lt;a&gt;</code> element</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">This anchor element should link to the <code class="code__2rdF32qjRVp7mMVBHuPwDS">'home'</code> path (using <code class="code__2rdF32qjRVp7mMVBHuPwDS">href</code> and a tag)</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">The <code class="code__2rdF32qjRVp7mMVBHuPwDS">&lt;a&gt;</code>‘s text should display <code class="code__2rdF32qjRVp7mMVBHuPwDS">Vet Office</code></li>
</ul>
</div></div></div><div class="checkpointCheckbox__vmGdbkCMW4Z7ET3KCrCJP checkboxSatisfied__1xX8YQAWCZp7OxlyblPKiC"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 2 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div></div>


<h3>Solution</h3>




<h1>Learn</h1>

<div class="gamut-1h3qpnn-Box ebnwbv90"><div aria-hidden="true" class="gamut-haybot-Text e8i0p5k0">Templates</div><span aria-hidden="true" class="gamut-yj8jvy-Text e8i0p5k0">Filters in Templates</span><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">With Django, variables can be modified from within the template using a <em>filter</em>. Filters modify variables passed in from <strong>views.py</strong> without the use of traditional methods like JavaScript. There are plenty of filters that can be found in the <a target="_blank" rel="noopener" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://docs.djangoproject.com/en/3.1/ref/templates/builtins/">Django documentation</a>, but we’ll only cover a few in this lesson. An example filter can be seen below:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-html" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk4">&lt;p&gt;</span><span class="mtk1">{{ username|upper }}</span><span class="mtk4">&lt;/p&gt;</span></span><br></div></code></pre></pre>
<p class="p__1qg33Igem5pAgn4kPMirjw">The filter is added onto a variable by using the <code class="code__2rdF32qjRVp7mMVBHuPwDS">|</code> symbol inside of the variable tags with the variable. The symbol goes after the variable name, and is followed by the filter that you want to use. In the above example, the <a target="_blank" rel="noopener" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://docs.djangoproject.com/en/3.1/ref/templates/builtins/#upper"><code class="code__2rdF32qjRVp7mMVBHuPwDS">upper</code> filter</a> converts the variable’s value to all uppercase characters. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Some filters also require arguments, however, arguments are handled differently with filters compared to how we handled arguments with URL. A filter with an argument can be seen here:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-html" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">{{ description|truncatewords_html:2 }}</span></span><br></div></code></pre></pre>
<p class="p__1qg33Igem5pAgn4kPMirjw">The <a target="_blank" rel="noopener" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://docs.djangoproject.com/en/3.1/ref/templates/builtins/#truncatewords-html"><code class="code__2rdF32qjRVp7mMVBHuPwDS">truncatewords_html</code> filter</a> requires an argument and will shorten text down to the integer supplied by our argument. In our case, we want to display <code class="code__2rdF32qjRVp7mMVBHuPwDS">2</code> words max. Any other words in the <code class="code__2rdF32qjRVp7mMVBHuPwDS">description</code> variable will be replaced with <code class="code__2rdF32qjRVp7mMVBHuPwDS">...</code>. We were able to supply our argument after the filter name separated by a <code class="code__2rdF32qjRVp7mMVBHuPwDS">:</code>.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Some filters also require certain data types in order to work. For instance, the <code class="code__2rdF32qjRVp7mMVBHuPwDS">time</code> filter requires a variable of data type <code class="code__2rdF32qjRVp7mMVBHuPwDS">datetime.datetime.Now()</code>, and will not work with any other data type. It is recommended to check out the documentation for a filter before using it to make sure you are using the proper data types and adding any necessary arguments.</p>
</div></div></div>


<h3>Instructions</h3>

<div><div aria-hidden="false"><div class="checkpoint__Mmv3yv-wu7NJCX0vgcy0h" data-testid="checkpoint-satisfied"><b class="checkpointNumber__P9kFWzdu5a6M0jcG_LgjT">1.</b><div class="checkpointBody__3Sn4jghNHiScLJ7-zmcXUk"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">Let’s first apply a filter to the <code class="code__2rdF32qjRVp7mMVBHuPwDS">{{ name }}</code> variable — add a filter that makes all the characters lowercased. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">You can find the list of filters in <a target="_blank" rel="noopener" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://docs.djangoproject.com/en/3.1/ref/templates/builtins/">Django’s documentation</a>.</p>
</div></div></div><div class="checkpointCheckbox__vmGdbkCMW4Z7ET3KCrCJP checkboxSatisfied__1xX8YQAWCZp7OxlyblPKiC"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 2 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div><div aria-hidden="false"><div class="checkpoint__Mmv3yv-wu7NJCX0vgcy0h" data-testid="checkpoint-satisfied"><b class="checkpointNumber__P9kFWzdu5a6M0jcG_LgjT">2.</b><div class="checkpointBody__3Sn4jghNHiScLJ7-zmcXUk"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">Now, let’s increase the complexity. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Apply a filter to <code class="code__2rdF32qjRVp7mMVBHuPwDS">pets</code> variable inside the <code class="code__2rdF32qjRVp7mMVBHuPwDS">for</code> loop:</p>
<ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Use the <a target="_blank" rel="noopener" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://docs.djangoproject.com/en/3.1/ref/templates/builtins/#dictsort">filter called <code class="code__2rdF32qjRVp7mMVBHuPwDS">dictsort</code></a> </li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Provide the <code class="code__2rdF32qjRVp7mMVBHuPwDS">dictsort</code> filter with an argument of <code class="code__2rdF32qjRVp7mMVBHuPwDS">"petname"</code></li>
</ul>
</div></div></div><div class="checkpointCheckbox__vmGdbkCMW4Z7ET3KCrCJP checkboxSatisfied__1xX8YQAWCZp7OxlyblPKiC"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 3 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div></div>


<h3>Solution</h3>




<h1>Learn</h1>

<div class="gamut-1h3qpnn-Box ebnwbv90"><div aria-hidden="true" class="gamut-haybot-Text e8i0p5k0">Templates</div><span aria-hidden="true" class="gamut-yj8jvy-Text e8i0p5k0">Review</span><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">Templates are a great way to reduce the amount of HTML that needs to be written in a website by allowing us to extend templates into the rest of the website to reduce repeat code. The options provided to us can help us in a number of ways including:</p>
<ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Common elements should go inside of a base template, and any page-specific content should be in their own templates. </li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Static files have to be loaded in the template they’ll be used in, as it won’t be passed on to child templates.</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Templates can also use DTL to help display variables, loop through and display dictionaries, and create conditionals within templates to reduce the number of templates needed for an application.</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">CSS files can be added to a template after adding a <strong>static/</strong> folder to the application. Remember that inside of <strong>static/</strong> there should be another folder named after the application.</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Variables are great for grabbing data from <strong>views.py</strong> to display in a template.</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><code class="code__2rdF32qjRVp7mMVBHuPwDS">if</code> statements can be used in DTL to conditionally display content.</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">DTL can use <code class="code__2rdF32qjRVp7mMVBHuPwDS">for</code> loops to go through lists.</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">URLs can be referenced with just the path name if the page is within the application. This only works with predefined paths and you should watch for any arguments that need to be passed.</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Filters are useful for modifying variables within a template as you won’t have to write too much extra code to modify the variable yourself.</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Some filters require arguments, so make sure that any filter used does not require any arguments.</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Some filters also only work with specific data types, so make sure to research a filter before using one by looking at the documentation for the filter.</li>
</ul>
<p class="p__1qg33Igem5pAgn4kPMirjw">Great job on completing templates! Next time you write HTML in Django, remember to take advantage of DTL to save yourself some time! </p>
</div></div></div>


<h3>Instructions</h3>

<div><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12 body__3bSqqzbent-J_gmFLtFRzM"><p class="p__1qg33Igem5pAgn4kPMirjw">If you want to challenge yourself:</p>
<ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Find different filters and apply them to variables</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Add more code to <strong>base.html</strong> and <strong>home.html</strong></li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Add another template</li>
</ul>
<p class="p__1qg33Igem5pAgn4kPMirjw">Or just run wild with your imagination! </p>
</div></div></div>


<h3>Solution</h3>




<h1>Learn</h1>

<div class="gamut-1h3qpnn-Box ebnwbv90"><div aria-hidden="true" class="gamut-haybot-Text e8i0p5k0">Build Python Web Apps with Django</div><span aria-hidden="true" class="gamut-yj8jvy-Text e8i0p5k0">Tourist Attractions with Templates</span><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">You’ll be creating an application that allows for users to see a list of tourist attractions in each state. Users can also specify the state that they want to see more detailed attractions with as well. You’ll be creating the templates for this website, meaning that you’ll be creating everything the users see using Django!</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">This will be done using the knowledge gained from the templates lesson, including extending off of base templates, adding static files, and adding filters to variables being used within the template!</p>
</div></div><div class="group__LspoGf1Fw0-ac_AUnuvRV"></div></div>


<h3>Instructions</h3>

<div class="tasks__2zeiH_BHmhuJBXUlJC3X0R"><span class="tasksHelp__2gwNuLZ9kdz9gCp9vw39no">Mark the tasks as complete by checking them off</span><h2 class="fit-full fcn-task-header">Creating a Base Template</h2><div><article class="fit-full fcn-task fcn-task--complete"><div class="gamut-1m02y73-FlexBox e1tc6bzh0"><div class="gamut-1efsrtw-Box ebnwbv90"><div aria-checked="true" aria-label="Task item 1" class="fcn-task__check fcn-task__check--checked centeredCheckbox__2QQhtR9gO-52xrQs_8ZEjS" data-cue="discovery-checklist" role="checkbox" tabindex="0" data-testid="task-1-checkbox"><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="gamut-dtzm1a-Box ebnwbv90"><span class="fcn-task__number" data-testid="task-1">1.</span></div><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12 narrativeMarkdown__1UywfcBd-60XKky6qUHIYA scrollable___DFOWZAyFa-jr7fZML66U"><p class="p__1qg33Igem5pAgn4kPMirjw">Before you start writing any code, take a look at the overall structure of the application. We’ve provided some code for you already to allow you to focus just on template creation!</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Things to consider and explore:</p>
<ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">What’s the project name? app name? </li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">What functions are provided in <strong>views.py</strong>?</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">What paths are in <strong>urls.py</strong>? </li>
</ul>
</div></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></article><article class="fit-full fcn-task fcn-task--complete"><div class="gamut-1m02y73-FlexBox e1tc6bzh0"><div class="gamut-1efsrtw-Box ebnwbv90"><div aria-checked="true" aria-label="Task item 2" class="fcn-task__check fcn-task__check--checked centeredCheckbox__2QQhtR9gO-52xrQs_8ZEjS" data-cue="discovery-checklist" role="checkbox" tabindex="0" data-testid="task-2-checkbox"><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="gamut-dtzm1a-Box ebnwbv90"><span class="fcn-task__number" data-testid="task-2">2.</span></div><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12 narrativeMarkdown__1UywfcBd-60XKky6qUHIYA scrollable___DFOWZAyFa-jr7fZML66U"><p class="p__1qg33Igem5pAgn4kPMirjw">Now that you’ve got a general sense of the app, let’s start by creating a base template. Right now we are getting a <code class="code__2rdF32qjRVp7mMVBHuPwDS">TemplateDoesNotExist</code> error when we try to load our application. This is Django telling us that it’s not finding the template we’re telling it to render in the location we told it to look. To fix this, all we have to do is add in the template.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Create <strong>base.html</strong> in <strong>tourist_attractions/templates/tourist_attractions</strong>.</p>
</div></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></article><article class="fit-full fcn-task fcn-task--complete"><div class="gamut-1m02y73-FlexBox e1tc6bzh0"><div class="gamut-1efsrtw-Box ebnwbv90"><div aria-checked="true" aria-label="Task item 3" class="fcn-task__check fcn-task__check--checked centeredCheckbox__2QQhtR9gO-52xrQs_8ZEjS" data-cue="discovery-checklist" role="checkbox" tabindex="0" data-testid="task-3-checkbox"><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="gamut-dtzm1a-Box ebnwbv90"><span class="fcn-task__number" data-testid="task-3">3.</span></div><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12 narrativeMarkdown__1UywfcBd-60XKky6qUHIYA scrollable___DFOWZAyFa-jr7fZML66U"><p class="p__1qg33Igem5pAgn4kPMirjw">Remember that <strong>base.html</strong> should contain some common elements, so add some structure.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Inside of <strong>base.html</strong>, add the doctype declaration, a <code class="code__2rdF32qjRVp7mMVBHuPwDS">&lt;head&gt;</code> element, and a <code class="code__2rdF32qjRVp7mMVBHuPwDS">&lt;body&gt;</code> element. </p>
</div></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></article><article class="fit-full fcn-task fcn-task--complete"><div class="gamut-1m02y73-FlexBox e1tc6bzh0"><div class="gamut-1efsrtw-Box ebnwbv90"><div aria-checked="true" aria-label="Task item 4" class="fcn-task__check fcn-task__check--checked centeredCheckbox__2QQhtR9gO-52xrQs_8ZEjS" data-cue="discovery-checklist" role="checkbox" tabindex="0" data-testid="task-4-checkbox"><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="gamut-dtzm1a-Box ebnwbv90"><span class="fcn-task__number" data-testid="task-4">4.</span></div><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12 narrativeMarkdown__1UywfcBd-60XKky6qUHIYA scrollable___DFOWZAyFa-jr7fZML66U"><p class="p__1qg33Igem5pAgn4kPMirjw">One common feature in all apps is to allow users to be able to navigate back to the home page.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Inside the <code class="code__2rdF32qjRVp7mMVBHuPwDS">&lt;body&gt;</code> add a link (<code class="code__2rdF32qjRVp7mMVBHuPwDS">&lt;a&gt;</code>) that users can click on to send them to the <code class="code__2rdF32qjRVp7mMVBHuPwDS">"home"</code> path. The text inside the link should read <code class="code__2rdF32qjRVp7mMVBHuPwDS">Take me home</code>. </p>
</div></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></article><article class="fit-full fcn-task fcn-task--complete"><div class="gamut-1m02y73-FlexBox e1tc6bzh0"><div class="gamut-1efsrtw-Box ebnwbv90"><div aria-checked="true" aria-label="Task item 5" class="fcn-task__check fcn-task__check--checked centeredCheckbox__2QQhtR9gO-52xrQs_8ZEjS" data-cue="discovery-checklist" role="checkbox" tabindex="0" data-testid="task-5-checkbox"><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="gamut-dtzm1a-Box ebnwbv90"><span class="fcn-task__number" data-testid="task-5">5.</span></div><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12 narrativeMarkdown__1UywfcBd-60XKky6qUHIYA scrollable___DFOWZAyFa-jr7fZML66U"><p class="p__1qg33Igem5pAgn4kPMirjw">Since you also want your <strong>base.html</strong> to be able to display page-specific content, you’ll need to add some blocks!</p>
<ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Inside the <code class="code__2rdF32qjRVp7mMVBHuPwDS">&lt;head&gt;</code> element, add a block called <code class="code__2rdF32qjRVp7mMVBHuPwDS">head</code>. This block will be used for loading assets.</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">In the <code class="code__2rdF32qjRVp7mMVBHuPwDS">&lt;body&gt;</code> element, under the <code class="code__2rdF32qjRVp7mMVBHuPwDS">&lt;a&gt;</code> element, add another block called <code class="code__2rdF32qjRVp7mMVBHuPwDS">content</code>. This block will be used to display page-specific content.</li>
</ul>
</div></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></article></div><h2 class="fit-full fcn-task-header">Creating the Home Page</h2><div><article class="fit-full fcn-task fcn-task--complete"><div class="gamut-1m02y73-FlexBox e1tc6bzh0"><div class="gamut-1efsrtw-Box ebnwbv90"><div aria-checked="true" aria-label="Task item 6" class="fcn-task__check fcn-task__check--checked centeredCheckbox__2QQhtR9gO-52xrQs_8ZEjS" data-cue="discovery-checklist" role="checkbox" tabindex="0" data-testid="task-6-checkbox"><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="gamut-dtzm1a-Box ebnwbv90"><span class="fcn-task__number" data-testid="task-6">6.</span></div><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12 narrativeMarkdown__1UywfcBd-60XKky6qUHIYA scrollable___DFOWZAyFa-jr7fZML66U"><p class="p__1qg33Igem5pAgn4kPMirjw">Now that we have our base template created, we can start making the homepage for the application. This will be the home of every state and every attraction.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Create a new HTML page called <strong>home.html</strong> in the same location as <strong>base.html</strong>.</p>
<ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Have it extend off of <strong>base.html</strong></li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Add a head block</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Add a content block</li>
</ul>
<p class="p__1qg33Igem5pAgn4kPMirjw">After implementing <strong>home.html</strong> the error in the browser should be gone and you should see your link appear!</p>
</div></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></article><article class="fit-full fcn-task fcn-task--complete"><div class="gamut-1m02y73-FlexBox e1tc6bzh0"><div class="gamut-1efsrtw-Box ebnwbv90"><div aria-checked="true" aria-label="Task item 7" class="fcn-task__check fcn-task__check--checked centeredCheckbox__2QQhtR9gO-52xrQs_8ZEjS" data-cue="discovery-checklist" role="checkbox" tabindex="0" data-testid="task-7-checkbox"><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="gamut-dtzm1a-Box ebnwbv90"><span class="fcn-task__number" data-testid="task-7">7.</span></div><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12 narrativeMarkdown__1UywfcBd-60XKky6qUHIYA scrollable___DFOWZAyFa-jr7fZML66U"><p class="p__1qg33Igem5pAgn4kPMirjw">Currently, our page looks a little bland, to change this we need to add some CSS files. This can be done by loading in the static files. Then, load in the static file <code class="code__2rdF32qjRVp7mMVBHuPwDS">'tourist_attractions/style.css'</code>.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">You’ll know this is done correctly when the background color changes to a light blue.</p>
</div></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></article><article class="fit-full fcn-task fcn-task--complete"><div class="gamut-1m02y73-FlexBox e1tc6bzh0"><div class="gamut-1efsrtw-Box ebnwbv90"><div aria-checked="true" aria-label="Task item 8" class="fcn-task__check fcn-task__check--checked centeredCheckbox__2QQhtR9gO-52xrQs_8ZEjS" data-cue="discovery-checklist" role="checkbox" tabindex="0" data-testid="task-8-checkbox"><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="gamut-dtzm1a-Box ebnwbv90"><span class="fcn-task__number" data-testid="task-8">8.</span></div><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12 narrativeMarkdown__1UywfcBd-60XKky6qUHIYA scrollable___DFOWZAyFa-jr7fZML66U"><p class="p__1qg33Igem5pAgn4kPMirjw">We want to welcome our users to the application and tell them what they’ll be looking at. To do this, inside of the <code class="code__2rdF32qjRVp7mMVBHuPwDS">content</code> block, add a <code class="code__2rdF32qjRVp7mMVBHuPwDS">&lt;h1&gt;</code> that says something like <code class="code__2rdF32qjRVp7mMVBHuPwDS">This is a list of attractions in America!</code>.</p>
</div></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></article><article class="fit-full fcn-task fcn-task--complete"><div class="gamut-1m02y73-FlexBox e1tc6bzh0"><div class="gamut-1efsrtw-Box ebnwbv90"><div aria-checked="true" aria-label="Task item 9" class="fcn-task__check fcn-task__check--checked centeredCheckbox__2QQhtR9gO-52xrQs_8ZEjS" data-cue="discovery-checklist" role="checkbox" tabindex="0" data-testid="task-9-checkbox"><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="gamut-dtzm1a-Box ebnwbv90"><span class="fcn-task__number" data-testid="task-9">9.</span></div><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12 narrativeMarkdown__1UywfcBd-60XKky6qUHIYA scrollable___DFOWZAyFa-jr7fZML66U"><p class="p__1qg33Igem5pAgn4kPMirjw">Now we want to show the users each attraction and what state that attraction is in. The best way to do this would be to build a table. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Under the <code class="code__2rdF32qjRVp7mMVBHuPwDS">&lt;h1&gt;</code> add:</p>
<ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">A <code class="code__2rdF32qjRVp7mMVBHuPwDS">&lt;table&gt;</code> element</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Inside the table, a table row (<code class="code__2rdF32qjRVp7mMVBHuPwDS">&lt;tr&gt;</code>) element</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Nested in the row, individual table headings (<code class="code__2rdF32qjRVp7mMVBHuPwDS">&lt;th&gt;</code>) for <code class="code__2rdF32qjRVp7mMVBHuPwDS">Attraction</code>, <code class="code__2rdF32qjRVp7mMVBHuPwDS">State</code>, and <code class="code__2rdF32qjRVp7mMVBHuPwDS">State details</code>. </li>
</ul>
<p class="p__1qg33Igem5pAgn4kPMirjw">By now you should have a table header on the webpage with three columns being <code class="code__2rdF32qjRVp7mMVBHuPwDS">Attraction</code>, <code class="code__2rdF32qjRVp7mMVBHuPwDS">State</code>, and <code class="code__2rdF32qjRVp7mMVBHuPwDS">State details</code>.</p>
</div></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></article><article class="fit-full fcn-task fcn-task--complete"><div class="gamut-1m02y73-FlexBox e1tc6bzh0"><div class="gamut-1efsrtw-Box ebnwbv90"><div aria-checked="true" aria-label="Task item 10" class="fcn-task__check fcn-task__check--checked centeredCheckbox__2QQhtR9gO-52xrQs_8ZEjS" data-cue="discovery-checklist" role="checkbox" tabindex="0" data-testid="task-10-checkbox"><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="gamut-dtzm1a-Box ebnwbv90"><span class="fcn-task__number" data-testid="task-10">10.</span></div><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12 narrativeMarkdown__1UywfcBd-60XKky6qUHIYA scrollable___DFOWZAyFa-jr7fZML66U"><p class="p__1qg33Igem5pAgn4kPMirjw">Now that we have the table mostly built, we need to go through every attraction and display it. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">To get started with the process:</p>
<ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Inside the <code class="code__2rdF32qjRVp7mMVBHuPwDS">&lt;table&gt;</code> and after the first row, add a <code class="code__2rdF32qjRVp7mMVBHuPwDS">for</code> loop using DTL.</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Have it loop through each <code class="code__2rdF32qjRVp7mMVBHuPwDS">item</code> in <code class="code__2rdF32qjRVp7mMVBHuPwDS">attractions</code>.</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Sort <code class="code__2rdF32qjRVp7mMVBHuPwDS">attractions</code> based on the <code class="code__2rdF32qjRVp7mMVBHuPwDS">state</code> using the filter <code class="code__2rdF32qjRVp7mMVBHuPwDS">dictsort</code>.</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Make sure to include the <code class="code__2rdF32qjRVp7mMVBHuPwDS">endfor</code>.</li>
</ul>
</div></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></article><article class="fit-full fcn-task fcn-task--complete"><div class="gamut-1m02y73-FlexBox e1tc6bzh0"><div class="gamut-1efsrtw-Box ebnwbv90"><div aria-checked="true" aria-label="Task item 11" class="fcn-task__check fcn-task__check--checked centeredCheckbox__2QQhtR9gO-52xrQs_8ZEjS" data-cue="discovery-checklist" role="checkbox" tabindex="0" data-testid="task-11-checkbox"><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="gamut-dtzm1a-Box ebnwbv90"><span class="fcn-task__number" data-testid="task-11">11.</span></div><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12 narrativeMarkdown__1UywfcBd-60XKky6qUHIYA scrollable___DFOWZAyFa-jr7fZML66U"><p class="p__1qg33Igem5pAgn4kPMirjw">Now that we have the loop set up, we want to show everything about that attraction. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Inside of the <code class="code__2rdF32qjRVp7mMVBHuPwDS">for</code> loop, we need to add some more HTML and DTL to display everything about the attraction. Let’s add these elements:</p>
<ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">A table row (<code class="code__2rdF32qjRVp7mMVBHuPwDS">&lt;tr&gt;</code>).</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Inside of the table row, add a table detail element (<code class="code__2rdF32qjRVp7mMVBHuPwDS">&lt;td&gt;</code>)</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">This <code class="code__2rdF32qjRVp7mMVBHuPwDS">&lt;td&gt;</code> element should display <code class="code__2rdF32qjRVp7mMVBHuPwDS">item.attraction_name</code>.</li>
</ul>
<p class="p__1qg33Igem5pAgn4kPMirjw">We’ll only see the first column displayed. But we’ll continue to work on this table! </p>
</div></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></article><article class="fit-full fcn-task fcn-task--complete"><div class="gamut-1m02y73-FlexBox e1tc6bzh0"><div class="gamut-1efsrtw-Box ebnwbv90"><div aria-checked="true" aria-label="Task item 12" class="fcn-task__check fcn-task__check--checked centeredCheckbox__2QQhtR9gO-52xrQs_8ZEjS" data-cue="discovery-checklist" role="checkbox" tabindex="0" data-testid="task-12-checkbox"><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="gamut-dtzm1a-Box ebnwbv90"><span class="fcn-task__number" data-testid="task-12">12.</span></div><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12 narrativeMarkdown__1UywfcBd-60XKky6qUHIYA scrollable___DFOWZAyFa-jr7fZML66U"><p class="p__1qg33Igem5pAgn4kPMirjw">We still need to fill in two other columns.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Add another <code class="code__2rdF32qjRVp7mMVBHuPwDS">&lt;td&gt;</code> element that will render <code class="code__2rdF32qjRVp7mMVBHuPwDS">item.state</code>.</p>
</div></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></article><article class="fit-full fcn-task fcn-task--complete"><div class="gamut-1m02y73-FlexBox e1tc6bzh0"><div class="gamut-1efsrtw-Box ebnwbv90"><div aria-checked="true" aria-label="Task item 13" class="fcn-task__check fcn-task__check--checked centeredCheckbox__2QQhtR9gO-52xrQs_8ZEjS" data-cue="discovery-checklist" role="checkbox" tabindex="0" data-testid="task-13-checkbox"><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="gamut-dtzm1a-Box ebnwbv90"><span class="fcn-task__number" data-testid="task-13">13.</span></div><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12 narrativeMarkdown__1UywfcBd-60XKky6qUHIYA scrollable___DFOWZAyFa-jr7fZML66U"><p class="p__1qg33Igem5pAgn4kPMirjw">For the third column, “State details”, we’ll add a link to a separate page that lists attractions only for a specific state using the urlpattern named <code class="code__2rdF32qjRVp7mMVBHuPwDS">details</code> that is pre-defined in <strong>urls.py</strong>. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">In the table we created in <strong>home.html</strong>, create another <code class="code__2rdF32qjRVp7mMVBHuPwDS">&lt;td&gt;</code> element containing a link element, <code class="code__2rdF32qjRVp7mMVBHuPwDS">&lt;a&gt;</code>, which displays the text “State details”. The <code class="code__2rdF32qjRVp7mMVBHuPwDS">href</code> attribute will use the <a target="_blank" rel="noopener" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://docs.djangoproject.com/en/3.2/ref/templates/builtins/#url"><code class="code__2rdF32qjRVp7mMVBHuPwDS">url</code></a> built-in tag, with <code class="code__2rdF32qjRVp7mMVBHuPwDS">'details'</code> as the pattern name. We can provide the state name as an argument, using the <a target="_blank" rel="noopener" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://docs.djangoproject.com/en/3.2/ref/templates/builtins/#slugify"><code class="code__2rdF32qjRVp7mMVBHuPwDS">slugify</code></a> filter to remove any spacing and capitalization.</p>
</div></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></article></div><h2 class="fit-full fcn-task-header">Creating the details page</h2><div><article class="fit-full fcn-task fcn-task--complete"><div class="gamut-1m02y73-FlexBox e1tc6bzh0"><div class="gamut-1efsrtw-Box ebnwbv90"><div aria-checked="true" aria-label="Task item 14" class="fcn-task__check fcn-task__check--checked centeredCheckbox__2QQhtR9gO-52xrQs_8ZEjS" data-cue="discovery-checklist" role="checkbox" tabindex="0" data-testid="task-14-checkbox"><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="gamut-dtzm1a-Box ebnwbv90"><span class="fcn-task__number" data-testid="task-14">14.</span></div><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12 narrativeMarkdown__1UywfcBd-60XKky6qUHIYA scrollable___DFOWZAyFa-jr7fZML66U"><p class="p__1qg33Igem5pAgn4kPMirjw">Now that we have every state listed out and their attractions, we can start going into details for each state in case a user wants to look at attractions for specific states.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Create a template called <strong>details.html</strong>. Extend the template from <strong>base.html</strong> and load in the CSS sheet like before. </p>
</div></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></article><article class="fit-full fcn-task fcn-task--complete"><div class="gamut-1m02y73-FlexBox e1tc6bzh0"><div class="gamut-1efsrtw-Box ebnwbv90"><div aria-checked="true" aria-label="Task item 15" class="fcn-task__check fcn-task__check--checked centeredCheckbox__2QQhtR9gO-52xrQs_8ZEjS" data-cue="discovery-checklist" role="checkbox" tabindex="0" data-testid="task-15-checkbox"><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="gamut-dtzm1a-Box ebnwbv90"><span class="fcn-task__number" data-testid="task-15">15.</span></div><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12 narrativeMarkdown__1UywfcBd-60XKky6qUHIYA scrollable___DFOWZAyFa-jr7fZML66U"><p class="p__1qg33Igem5pAgn4kPMirjw">Inside of the content block, add an <code class="code__2rdF32qjRVp7mMVBHuPwDS">&lt;h1&gt;</code> that says <code class="code__2rdF32qjRVp7mMVBHuPwDS">This is a list of tourist attractions for</code> followed by the state name with the <code class="code__2rdF32qjRVp7mMVBHuPwDS">title</code> filter.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Once this is added, go ahead and click on one of the state details buttons to see what this page looks like!</p>
</div></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></article><article class="fit-full fcn-task fcn-task--complete"><div class="gamut-1m02y73-FlexBox e1tc6bzh0"><div class="gamut-1efsrtw-Box ebnwbv90"><div aria-checked="true" aria-label="Task item 16" class="fcn-task__check fcn-task__check--checked centeredCheckbox__2QQhtR9gO-52xrQs_8ZEjS" data-cue="discovery-checklist" role="checkbox" tabindex="0" data-testid="task-16-checkbox"><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="gamut-dtzm1a-Box ebnwbv90"><span class="fcn-task__number" data-testid="task-16">16.</span></div><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12 narrativeMarkdown__1UywfcBd-60XKky6qUHIYA scrollable___DFOWZAyFa-jr7fZML66U"><p class="p__1qg33Igem5pAgn4kPMirjw">This page is going to look similar to the homepage. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Start by adding a table with the headers <code class="code__2rdF32qjRVp7mMVBHuPwDS">Attraction</code> and <code class="code__2rdF32qjRVp7mMVBHuPwDS">State</code> to the <code class="code__2rdF32qjRVp7mMVBHuPwDS">content</code> block. </p>
</div></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></article><article class="fit-full fcn-task fcn-task--complete"><div class="gamut-1m02y73-FlexBox e1tc6bzh0"><div class="gamut-1efsrtw-Box ebnwbv90"><div aria-checked="true" aria-label="Task item 17" class="fcn-task__check fcn-task__check--checked centeredCheckbox__2QQhtR9gO-52xrQs_8ZEjS" data-cue="discovery-checklist" role="checkbox" tabindex="0" data-testid="task-17-checkbox"><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="gamut-dtzm1a-Box ebnwbv90"><span class="fcn-task__number" data-testid="task-17">17.</span></div><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12 narrativeMarkdown__1UywfcBd-60XKky6qUHIYA scrollable___DFOWZAyFa-jr7fZML66U"><p class="p__1qg33Igem5pAgn4kPMirjw">We still want to go through each attraction. Therefore, create a loop similar to the one from before that goes through every item in <code class="code__2rdF32qjRVp7mMVBHuPwDS">attractions</code>. This loop should also use the <code class="code__2rdF32qjRVp7mMVBHuPwDS">dictsort:"state"</code> filter. </p>
</div></div></div></article><article class="fit-full fcn-task fcn-task--complete"><div class="gamut-1m02y73-FlexBox e1tc6bzh0"><div class="gamut-1efsrtw-Box ebnwbv90"><div aria-checked="true" aria-label="Task item 18" class="fcn-task__check fcn-task__check--checked centeredCheckbox__2QQhtR9gO-52xrQs_8ZEjS" data-cue="discovery-checklist" role="checkbox" tabindex="0" data-testid="task-18-checkbox"><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="gamut-dtzm1a-Box ebnwbv90"><span class="fcn-task__number" data-testid="task-18">18.</span></div><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12 narrativeMarkdown__1UywfcBd-60XKky6qUHIYA scrollable___DFOWZAyFa-jr7fZML66U"><p class="p__1qg33Igem5pAgn4kPMirjw">One thing we want to do differently here is that we only want to display attractions in the selected state. We know what state we want to use because we have a variable called <code class="code__2rdF32qjRVp7mMVBHuPwDS">statename</code> passed in from <strong>views.py</strong>.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">To do this, we are going to want to add an <code class="code__2rdF32qjRVp7mMVBHuPwDS">if</code> statement that checks to see if the attractions state is the same as <code class="code__2rdF32qjRVp7mMVBHuPwDS">statename</code>. However, we need to add the <code class="code__2rdF32qjRVp7mMVBHuPwDS">lower</code> filter to the attractions state since that is capitalized, but <code class="code__2rdF32qjRVp7mMVBHuPwDS">statename</code> is not capitalized.</p>
</div></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></article><article class="fit-full fcn-task fcn-task--complete"><div class="gamut-1m02y73-FlexBox e1tc6bzh0"><div class="gamut-1efsrtw-Box ebnwbv90"><div aria-checked="true" aria-label="Task item 19" class="fcn-task__check fcn-task__check--checked centeredCheckbox__2QQhtR9gO-52xrQs_8ZEjS" data-cue="discovery-checklist" role="checkbox" tabindex="0" data-testid="task-19-checkbox"><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="gamut-dtzm1a-Box ebnwbv90"><span class="fcn-task__number" data-testid="task-19">19.</span></div><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12 narrativeMarkdown__1UywfcBd-60XKky6qUHIYA scrollable___DFOWZAyFa-jr7fZML66U"><p class="p__1qg33Igem5pAgn4kPMirjw">Inside of the <code class="code__2rdF32qjRVp7mMVBHuPwDS">if</code> statement, add a table row with two table details. One displaying the attraction name and the other displaying the attraction state.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">If done correctly, when you click on the “State details” link, you’ll get linked to a page that only displays that state’s attractions!</p>
</div></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></article><article class="fit-full fcn-task fcn-task--complete"><div class="gamut-1m02y73-FlexBox e1tc6bzh0"><div class="gamut-1efsrtw-Box ebnwbv90"><div aria-checked="true" aria-label="Task item 20" class="fcn-task__check fcn-task__check--checked centeredCheckbox__2QQhtR9gO-52xrQs_8ZEjS" data-cue="discovery-checklist" role="checkbox" tabindex="0" data-testid="task-20-checkbox"><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="gamut-dtzm1a-Box ebnwbv90"><span class="fcn-task__number" data-testid="task-20">20.</span></div><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12 narrativeMarkdown__1UywfcBd-60XKky6qUHIYA scrollable___DFOWZAyFa-jr7fZML66U"><p class="p__1qg33Igem5pAgn4kPMirjw">And that’s it! We now have a website that displays attractions for any state! Go ahead and modify <strong>views.py</strong> to add more states and see how our templates react! If you want, go ahead and try to add an image on the homepage!</p>
</div></div></div></article></div></div>


<h3>Solution</h3>




