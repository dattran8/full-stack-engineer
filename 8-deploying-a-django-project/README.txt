<h1 class="gamut-1ewwict-Text e8i0p5k0">Sharing Your Django App with Others</h1><p class="gamut-1xdcsrc-Text e8i0p5k0"><span data-testid="markdown" class="markdown__32VfO5X72_8Hgq-lL1FiEX">You’ve learned the basics of a Django app and built out core functionality in Codecademy. Now it’s time to take the next step and learn how to deploy your site to share it with the internet!

The first step would be to start working on a Django project on your local computer. In this module, you’ll learn how to install Django and how to use Python anywhere to deploy your site. When you’re ready, click next to get started.
</span></p><div class="gamut-unqu21-Box-ArticleContentContainer e1xfx7rd1"><div data-testid="markdown" class="spacing-loose__3_R8mSIQ2cspwhDGkCOXTu markdown__32VfO5X72_8Hgq-lL1FiEX darkTheme__1DQKVxwlUlCBpualn71c3Z gamut-gk1onf-ArticleMarkdown e1xfx7rd0"><p class="p__1qg33Igem5pAgn4kPMirjw">In this module, you’ll learn how to deploy a Django app on the internet! </p>
</div></div>




<h1 class="gamut-1ewwict-Text e8i0p5k0">Installing Django</h1><p class="gamut-1xdcsrc-Text e8i0p5k0"><span data-testid="markdown" class="markdown__32VfO5X72_8Hgq-lL1FiEX">In this article, you will learn how to install a virtual environment then install Django in the virtual environment all on your own computer! </span></p><div class="gamut-unqu21-Box-ArticleContentContainer e1xfx7rd1"><div data-testid="markdown" class="spacing-loose__3_R8mSIQ2cspwhDGkCOXTu markdown__32VfO5X72_8Hgq-lL1FiEX darkTheme__1DQKVxwlUlCBpualn71c3Z gamut-gk1onf-ArticleMarkdown e1xfx7rd0"><h2 id="heading-setting-up" class="h2__1Ly_Sza5xVS3yZl46_StcN">Setting Up</h2>
<p class="p__1qg33Igem5pAgn4kPMirjw">Django is a high-level web framework written in <a target="_blank" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://www.codecademy.com/catalog/language/python">Python</a>, used to quickly develop complex database-heavy websites like Instagram, Robinhood, and Youtube. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Since Django is based on Python you’ll need to install both <a target="_blank" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://www.codecademy.com/articles/install-python3">Python and pip</a>, Python’s package-management software which will allow us to install Django and other third-party packages. Read through and follow our <a target="_blank" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://www.codecademy.com/articles/install-python3">Installing Python 3 and Python Packages</a> article if you need some guidance. You can check to see if Python and pip are installed by using the following commands in the command-line tool: </p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">python3 --version</span></span><br></div></code></pre></pre><pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">pip --version</span></span><br></div></code></pre></pre><p class="p__1qg33Igem5pAgn4kPMirjw">If both were installed properly, the version that was installed will display.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Now that you’ve made sure that your computer has Python and pip, there’s still one more step you need to take before installing Django which is installing a virtual environment.</p>
<h2 id="heading-whats-a-virtual-environment" class="h2__1Ly_Sza5xVS3yZl46_StcN">What’s a Virtual Environment?</h2>
<p class="p__1qg33Igem5pAgn4kPMirjw">Sometimes you’ll need to work on multiple projects on the same computer. However, each project may require installing different third-party packages and libraries. Since you don’t want these packages and libraries from one project to spill over into all of your projects, virtual environments allow you to keep your projects isolated from each other. You can think of it as a protective bubble that allows you to install packages or configure settings without affecting any other projects. First, install a virtual environment and then install Django in the virtual environment.</p>
<h2 id="heading-installing-a-virtual-environment" class="h2__1Ly_Sza5xVS3yZl46_StcN">Installing a Virtual Environment</h2>
<p class="p__1qg33Igem5pAgn4kPMirjw">In this walkthrough, you’ll go over how to install a virtual environment in Windows and MacOS. The first step you’ll need to take is to launch the <a target="_blank" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://www.codecademy.com/articles/command-line-interface">command line
interface</a>. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">On <strong>Windows</strong> it’s called the <em>Command Prompt</em>:</p>
<p class="p__1qg33Igem5pAgn4kPMirjw"><img src="https://static-assets.codecademy.com/skillpaths/django/deploying/ms_command_prompt.png" alt="Windows Command Prompt" class="img__1JGFO2nlisObc3KeOSGPRp"></p>
<p class="p__1qg33Igem5pAgn4kPMirjw">On <strong>Mac</strong> it’s called the <em>Terminal</em>: 
<img src="https://static-assets.codecademy.com/skillpaths/django/deploying/mac_terminal_v2.png" alt="MacOs Terminal" class="img__1JGFO2nlisObc3KeOSGPRp"></p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Depending on your operating system you can execute the following commands to install a virtual environment:</p>
<ol class="ol__1XI8Ausmo9cwwog3NvDzWF">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><p class="p__1qg33Igem5pAgn4kPMirjw">The first command you’ll need to run is:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">python3 -m venv project_env</span></span><br></div></code></pre></pre><p class="p__1qg33Igem5pAgn4kPMirjw">The <code class="code__2rdF32qjRVp7mMVBHuPwDS">venv</code> is a module that expects an environment name followed after it. The environment name is what your virtual environment will be called, almost like naming a file. Make sure there are no spaces in the environment name as it wouldn’t be recognized later on, instead use camel case or <code class="code__2rdF32qjRVp7mMVBHuPwDS">_</code> or <code class="code__2rdF32qjRVp7mMVBHuPwDS">-</code> in place of space. In this case, the example’s environment name is <code class="code__2rdF32qjRVp7mMVBHuPwDS">project_env</code>, but you can name it whatever you want.</p>
</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><p class="p__1qg33Igem5pAgn4kPMirjw">After the command is executed, your environment should be created in a few seconds. There will be no indication that the environment is created, however, you just need to activate it. Activation is a little different depending on what operating system you’re using:</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">On Windows, you need to begin the command with your environment name followed by <code class="code__2rdF32qjRVp7mMVBHuPwDS">Scripts\activate.bat</code> like so:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">project_env\Scripts\.activate.bat</span></span><br></div></code></pre></pre><p class="p__1qg33Igem5pAgn4kPMirjw">On Mac, you need to begin the command with <code class="code__2rdF32qjRVp7mMVBHuPwDS">source</code> followed by your environment name followed by <code class="code__2rdF32qjRVp7mMVBHuPwDS">bin/activate</code> like so: </p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">source project_env/bin/activate</span></span><br></div></code></pre></pre><p class="p__1qg33Igem5pAgn4kPMirjw">You can tell if you’re in the virtual environment because your command prompt/terminal will have the name of the
environment in parenthesis before every directory like so: <code class="code__2rdF32qjRVp7mMVBHuPwDS">(project_env)</code>. Same on both
Windows and Mac. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">On Windows:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">(project_env) c:\Users\username&gt;</span></span><br></div></code></pre></pre><p class="p__1qg33Igem5pAgn4kPMirjw">On Mac:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">(project_env) username ~&nbsp;%</span></span><br></div></code></pre></pre></li>
</ol>
<h2 id="heading-installing-django-in-our-virtual-environment" class="h2__1Ly_Sza5xVS3yZl46_StcN">Installing Django in our virtual environment</h2>
<p class="p__1qg33Igem5pAgn4kPMirjw">Now that you have your virtual environment installed and activated, you can install Django. Installing Django uses the same steps for both Windows and Mac.</p>
<ol class="ol__1XI8Ausmo9cwwog3NvDzWF">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><p class="p__1qg33Igem5pAgn4kPMirjw">The first command we’ll need to run is </p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">pip3 install django</span></span><br></div></code></pre></pre><p class="p__1qg33Igem5pAgn4kPMirjw">This command will automatically install the latest version of Django for use.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">However, if we want to install a specific version of Django we can use the following command: </p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">pip3 install Django==3.2</span></span><br></div></code></pre></pre><p class="p__1qg33Igem5pAgn4kPMirjw">This might be useful if you’re in a team and everyone needs to be in a specific version of Django. </p>
</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><p class="p__1qg33Igem5pAgn4kPMirjw">Whichever command you decide to use, it may take up to 30 seconds or longer to install Django depending on your internet speed. If Django was successfully installed you’ll get a message of <code class="code__2rdF32qjRVp7mMVBHuPwDS">Successfully installed django-X.X</code>. Where the <code class="code__2rdF32qjRVp7mMVBHuPwDS">X.X</code> is the version number, like <code class="code__2rdF32qjRVp7mMVBHuPwDS">3.2</code>. 
<img src="https://static-assets.codecademy.com/skillpaths/django/deploying/django_successful_installation.png" alt="Django Installation success Message" class="img__1JGFO2nlisObc3KeOSGPRp"></p>
</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><p class="p__1qg33Igem5pAgn4kPMirjw">You can further check what version of Django you’re on by using the command: </p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">django-admin --version</span></span><br></div></code></pre></pre></li>
</ol>
<h2 id="heading-conclusion" class="h2__1Ly_Sza5xVS3yZl46_StcN">Conclusion</h2>
<p class="p__1qg33Igem5pAgn4kPMirjw">Congratulations, you learned how to install a virtual environment so that you can properly work on a project on your own computer! Then you were able to install Django in your virtual environment and check what version was installed. Well done on taking your first steps to master Django, have fun creating amazing projects! </p>
</div></div>




<h1 class="gamut-1ewwict-Text e8i0p5k0">Deploy Your App to PythonAnywhere</h1><p class="gamut-1xdcsrc-Text e8i0p5k0"><span data-testid="markdown" class="markdown__32VfO5X72_8Hgq-lL1FiEX">Learn how to use PythonAnywhere to deploy your Django app! </span></p><div class="gamut-unqu21-Box-ArticleContentContainer e1xfx7rd1"><div data-testid="markdown" class="spacing-loose__3_R8mSIQ2cspwhDGkCOXTu markdown__32VfO5X72_8Hgq-lL1FiEX darkTheme__1DQKVxwlUlCBpualn71c3Z gamut-gk1onf-ArticleMarkdown e1xfx7rd0"><h2 id="heading-hosting-your-app-on-the-web" class="h2__1Ly_Sza5xVS3yZl46_StcN">Hosting your app on the web</h2>
<p class="p__1qg33Igem5pAgn4kPMirjw">Now that you’ve created your Django app locally, you may want to <em>deploy</em> or publish it on the web to share with other people! There are many hosting services available, and there is a wide range of features and pricing among them. This article will walk you through deploying your app on <a target="_blank" rel="noopener" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://www.pythonanywhere.com/">PythonAnywhere</a>, a site that specializes in Python-based app deployments and provides a free tier option.</p>
<h3 id="heading-requirements" class="h3__3B1DSzXTW-ux1viDSStOux">Requirements</h3>
<p class="p__1qg33Igem5pAgn4kPMirjw">Before proceeding, you should have the following:</p>
<ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">A <a target="_blank" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://www.codecademy.com/courses/deploy-a-website/lessons/github-pages">GitHub account</a></li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">An account on <a target="_blank" rel="noopener" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://www.pythonanywhere.com/pricing/">PythonAnywhere</a><ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Select the “Create a Beginner account” option</li>
</ul>
</li>
</ul>
<h2 id="heading-pythonanywhere" class="h2__1Ly_Sza5xVS3yZl46_StcN">PythonAnywhere</h2>
<p class="p__1qg33Igem5pAgn4kPMirjw">If you’re not familiar with them, take the opportunity to learn about PythonAnywhere’s service and set up an account. Login and take a look at the dashboard options. Your deployed app will reside at the url <code class="code__2rdF32qjRVp7mMVBHuPwDS">&lt;your username&gt;.pythonanywhere.com</code> when you are finished. </p>
<h3 id="heading-setting-up-your-project" class="h3__3B1DSzXTW-ux1viDSStOux">Setting Up Your Project</h3>
<p class="p__1qg33Igem5pAgn4kPMirjw">This article will use the app found at <a target="_blank" rel="noopener" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://github.com/Codecademy/djangovet">Codecademy’s Django Example repository</a>, this is the Vetoffice app that you’ve built during the span of this Skill Path. Feel free to fork this repository to your own GitHub account and follow along this article. You are also welcome to use your own project if you like but you may have to modify some of these steps. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw"><strong>Note</strong>: if using your own app, make sure to run the following command before doing your last push:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">$ pip freeze &gt; requirements.txt</span></span><br></div></code></pre></pre><p class="p__1qg33Igem5pAgn4kPMirjw">This command creates a <strong>requirements.txt</strong> file that can be used to install the necessary project components on the hosting site. Make sure you commit and push this file to your repo.</p>
<h3 id="heading-setting-up-pythonanywhere-dashboard" class="h3__3B1DSzXTW-ux1viDSStOux">Setting Up PythonAnywhere Dashboard</h3>
<p class="p__1qg33Igem5pAgn4kPMirjw">1) Once logged in, navigate to your dashboard.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">2) Find the Console section on the left side of the dashboard and launch a new bash console.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw"><img src="https://static-assets.codecademy.com/skillpaths/django/deploying/pythonanywhere_console.png" alt="PythonAnywhere's dashboard to show how to create a new console by clicking the $Bash button" class="img__1JGFO2nlisObc3KeOSGPRp"></p>
<p class="p__1qg33Igem5pAgn4kPMirjw">3) A console will launch in the same window. A <code class="code__2rdF32qjRVp7mMVBHuPwDS">pwd</code> command at the prompt will show you are in your home directory <code class="code__2rdF32qjRVp7mMVBHuPwDS">/home/&lt;your account name&gt;</code></p>
<p class="p__1qg33Igem5pAgn4kPMirjw">At the prompt clone the Github repo for the app.</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">$ git clone https://github.com/&lt;github username&gt;/&lt;</span><span class="mtk1">repo name&gt;.git</span></span><br></div></code></pre></pre><p class="p__1qg33Igem5pAgn4kPMirjw">A <code class="code__2rdF32qjRVp7mMVBHuPwDS">tree &lt;repo name&gt;</code> at the command prompt will show your success.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">4) Navigate to your repo’s home directory:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">$ cd &lt;repo name&gt;</span></span><br></div></code></pre></pre><p class="p__1qg33Igem5pAgn4kPMirjw">5) You will now have to create a virtual environment for your code to run. PythonAnywhere prefers you use the script <code class="code__2rdF32qjRVp7mMVBHuPwDS">mkvirtualenv</code> to create and activate your virtual environment. At the time of this writing PythonAnywhere’s latest version of Python is 3.8.</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">$ mkvirtualenv --python=python3.8 &lt;some env name&gt;</span></span><br></div></code></pre></pre><p class="p__1qg33Igem5pAgn4kPMirjw">Make a note of the environment name you chose. You’ll need to enter the name in the web app settings later.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">6) Confirm your <strong>requirements.txt</strong> is present in the directory using <code class="code__2rdF32qjRVp7mMVBHuPwDS">ls</code>. If it is you may run the next command.</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">$ pip install -r requirements.txt</span></span><br></div></code></pre></pre><p class="p__1qg33Igem5pAgn4kPMirjw"><strong>Note</strong>: If you didn’t create a <strong>requirements.txt</strong> you can also install the latest Django version manually by running</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">$ pip install django</span></span><br></div></code></pre></pre><p class="p__1qg33Igem5pAgn4kPMirjw">7) PythonAnywhere requires a few configuration items in its web application console. You will need to have the following handy for the next steps:</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">• Your application’s root folder (where <strong>manage.py</strong> is)
• The project root folder (where <strong>settings.py</strong> is)
• Your virtual environment name</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">8) In the web page where you’re using the PythonAnywhere console you’ll notice a main menu toggle in the upper right corner. Click that and choose <strong>Web</strong>.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw"><img src="https://static-assets.codecademy.com/skillpaths/django/deploying/pythonanywhere_console_menu.png" alt="PythonAnywhere's console's main menu toggle which expands to many options, select the &quot;Web&quot; option" class="img__1JGFO2nlisObc3KeOSGPRp"></p>
<p class="p__1qg33Igem5pAgn4kPMirjw">You will now set up the Web application.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">9) Click the blue buttons saying <strong>Add a New Web App</strong></p>
<p class="p__1qg33Igem5pAgn4kPMirjw"><img src="https://static-assets.codecademy.com/skillpaths/django/deploying/pythonanywhere_add_new_web_app.png" alt="PythonAnywhere's button that says &quot;Add a new web app&quot;" class="img__1JGFO2nlisObc3KeOSGPRp"></p>
<p class="p__1qg33Igem5pAgn4kPMirjw">10) The next screen will give you a choice for a hosting web address. Choose the domain name, <code class="code__2rdF32qjRVp7mMVBHuPwDS">&lt;your-user-name&gt;.pythonanywhere.com</code>.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">11) Once you have chosen your web address, click <strong>Next</strong>. The next screen will show you various frameworks to configure. It may be tempting to choose Django but this menu option is only for new projects. Your app should be already created, so choose <strong>Manual Configuration</strong>:</p>
<p class="p__1qg33Igem5pAgn4kPMirjw"><img src="https://static-assets.codecademy.com/skillpaths/django/deploying/pythonanywhere_select_framework.png" alt="PythonAnywhere's prompt to select a Python Web framework, select &quot;Manual Configuration&quot;" class="img__1JGFO2nlisObc3KeOSGPRp"></p>
<p class="p__1qg33Igem5pAgn4kPMirjw">12) Once you choose <strong>Manual Configuration</strong>, you’ll be presented with various versions of Python. Choose the newest version of Python available in the list (At the time of this article it would be <strong>Python 3.8</strong>)</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Once you choose your Python version you’ll see a blurb about WSGI files. Read this; it will make sense later. Click <strong>Next</strong> when finished.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">13) The next screen is where you have to enter details about your project. The areas on this page you need to modify appear in:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-html" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk4">&lt;span</span><span class="mtk1"> </span><span class="mtk7">style</span><span class="mtk1">=</span><span class="mtk8">"color:red"</span><span class="mtk4">&gt;</span><span class="mtk1">_`red italic`_</span><span class="mtk4">&lt;/span&gt;</span></span><br></div></code></pre></pre>
<p class="p__1qg33Igem5pAgn4kPMirjw">For now, skip down to the <code class="code__2rdF32qjRVp7mMVBHuPwDS">virtualenv</code> path.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw"><img src="https://static-assets.codecademy.com/skillpaths/django/deploying/pythonanywhere_virtualenv.png" alt="PythonAnywhere's virtualenv section which allows you to add in the path to a virtualenv" class="img__1JGFO2nlisObc3KeOSGPRp"></p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Configure it to be <code class="code__2rdF32qjRVp7mMVBHuPwDS">/home/&lt;your username&gt;/.virtualenvs/&lt;your virtualenv name&gt;</code>. <strong>Tip</strong>: if you just type the name of your virtual environment, PythonAnywhere will automatically add the rest of the path.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">14) Next, scroll down to the <strong>Static Files</strong> area. If you are using static files in the provided <a target="_blank" rel="noopener" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://github.com/Codecademy/djangovet">GitHub repo</a>, you will create an entry and set the “URL” to be <code class="code__2rdF32qjRVp7mMVBHuPwDS">/static/</code> and the “Directory” to be the full path to your static directory on PythonAnywhere: <code class="code__2rdF32qjRVp7mMVBHuPwDS">/home/yourname/djangovet/vetoffice/static</code>.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Notice there is a <strong>Security</strong> section. You will return to this later when you secure your site.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Now scroll up above to the <strong>Code</strong> section.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw"><img src="https://static-assets.codecademy.com/skillpaths/django/deploying/pythonanywhere_source_code.png" alt="PythonAnywhere's code section which allows you to add the path to your web app" class="img__1JGFO2nlisObc3KeOSGPRp"></p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Set the working directory for your code to be <code class="code__2rdF32qjRVp7mMVBHuPwDS">/home/&lt;your username&gt;/&lt;your repo name&gt;</code>. <strong>Tip</strong>: If you just type the name of your repo PythonAnywhere will automatically fill in your home path.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">15) The last entry in the <strong>Code</strong> area is a link to the WSGI file PythonAnywhere created for you. This is different from the one in your project root. Go ahead and click it so it opens in an editor.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Delete all sections except the one starting with:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1"># +++++++++++ DJANGO +++++++++++</span></span><br></div></code></pre></pre><p class="p__1qg33Igem5pAgn4kPMirjw">and then uncomment the lines of Python code in this block starting with <code class="code__2rdF32qjRVp7mMVBHuPwDS">import os</code>. Tip: To toggle the comments off in one step, select from <code class="code__2rdF32qjRVp7mMVBHuPwDS">import os</code> through <code class="code__2rdF32qjRVp7mMVBHuPwDS">application = get_wsgi_application()</code> and press <kbd>Cmd</kbd>+<kbd>/</kbd> on your keyboard (Mac) or <kbd>Ctrl</kbd>+<kbd>/</kbd> on Windows. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Here’s how your file should look like afterward, but, make sure to change <code class="code__2rdF32qjRVp7mMVBHuPwDS">yourname</code> to your PythonAnywhere account name and rename <code class="code__2rdF32qjRVp7mMVBHuPwDS">mysite</code> in the code to be the name of your project!</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-python" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span> </span></span><br><span><span class="mtk12">import</span><span class="mtk1"> </span><span class="mtk9">os</span></span><br><span><span class="mtk12">import</span><span class="mtk1"> </span><span class="mtk9">sys</span></span><br><span><span class="mtk16">#</span></span><br><span><span class="mtk16">## assuming your django settings file is at '/home</span><span class="mtk16">/yourname/mysite/mysite/settings.py'</span></span><br><span><span class="mtk16">## and your manage.py is is at '/home/yourname/mys</span><span class="mtk16">ite/manage.py'</span></span><br><span><span class="mtk9">path</span><span class="mtk1"> =&nbsp;</span><span class="mtk8">'/home/yourname/mysite'</span></span><br><span><span class="mtk12">if</span><span class="mtk1"> </span><span class="mtk9">path</span><span class="mtk1"> </span><span class="mtk12">not</span><span class="mtk1"> </span><span class="mtk12">in</span><span class="mtk1"> </span><span class="mtk9">sys</span><span class="mtk1">.</span><span class="mtk10">path</span><span class="mtk1">:</span></span><br><span><span class="mtk1">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="mtk9">sys</span><span class="mtk1">.</span><span class="mtk10">path</span><span class="mtk9">.</span><span class="mtk10">append</span><span class="mtk1">(</span><span class="mtk9">path</span><span class="mtk1">)</span></span><br><span><span class="mtk16">#</span></span><br><span><span class="mtk9">os</span><span class="mtk1">.</span><span class="mtk10">environ</span><span class="mtk1">[</span><span class="mtk8">'DJANGO_SETTINGS_MODULE'</span><span class="mtk1">] =&nbsp;</span><span class="mtk8">'mysite.settings'</span></span><br><span><span class="mtk16">#</span></span><br><span><span class="mtk16">## then:</span></span><br><span><span class="mtk12">from</span><span class="mtk1"> </span><span class="mtk9">django</span><span class="mtk1">.</span><span class="mtk10">core</span><span class="mtk9">.</span><span class="mtk10">wsgi</span><span class="mtk1"> </span><span class="mtk12">import</span><span class="mtk1"> </span><span class="mtk9">get_wsgi_application</span></span><br><span><span class="mtk9">application</span><span class="mtk1"> =&nbsp;</span><span class="mtk9">get_wsgi_application</span><span class="mtk1">()</span></span><br></div></code></pre></pre>
<p class="p__1qg33Igem5pAgn4kPMirjw">16) Click Save.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">17) Return to the PythonAnywhere’s web app console, by clicking the right-corner menu. Your PythonAnywhere configuration’s now set up! Let’s now touch up your project to make it safe and deployable. </p>
<h2 id="heading-security-configuration" class="h2__1Ly_Sza5xVS3yZl46_StcN">Security Configuration</h2>
<p class="p__1qg33Igem5pAgn4kPMirjw">At this point, your web app could launch but it wouldn’t work correctly and it wouldn’t be secure. You have some items to clean up in <strong>settings.py</strong>. From this point forward, <strong>settings.py</strong> will be different in production (what users interact with) from what it is in development. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">1) Because of this, if you are using your own repo, in your local development environment, add <strong>/projectname/settings.py</strong> to your <strong>.gitignore</strong> file. After you complete this step, open <strong>settings.py</strong> in your local development environment. You will need to copy information from this file for the next step. If you are using <a target="_blank" rel="noopener" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://github.com/Codecademy/django-example/tree/main">Codecademy’s repo</a> just refer to the <strong>settings.py</strong> in your PythonAnywhere directory.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">2) Now, back in your PythonAnywhere web console, you’ll find the “Go to Directory” link next to your “Working directory” setting. Click that and you will open a file browser with context at the root of your home folder.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">On the left side of the screen navigate to your project folder (where manage.py resides). You will create a new file here named <strong>keys.json</strong>.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">3) In the Files area on the right half of the screen, enter <strong>keys.json</strong> into the file name entry box. Then click <strong>New empty file</strong>.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw"><img src="https://static-assets.codecademy.com/skillpaths/django/deploying/pythonanywhere_new_empty_file.png" alt="Creating a new file in the Files area" class="img__1JGFO2nlisObc3KeOSGPRp"></p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Before you enter the code in this file, you will need to copy your <code class="code__2rdF32qjRVp7mMVBHuPwDS">SECRET_KEY</code> value out of your local <strong>settings.py</strong> or take this opportunity to generate another random string to use.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Open the <strong>keys.json</strong> file you just created and enter the following:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-js" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">{</span></span><br><span><span class="mtk1">&nbsp;&nbsp;&nbsp;</span><span class="mtk8">"SECRETKEY"</span><span class="mtk1">: </span><span class="mtk8">"&lt;paste in the long cryptic key you took from the </span><span class="mtk8">settings.py file or make up a&nbsp;random string&gt;"</span></span><br><span><span class="mtk1">}</span></span><br></div></code></pre></pre>
<p class="p__1qg33Igem5pAgn4kPMirjw">Now, it’s important to remove the secret key in the <em>production</em> version of <strong>settings.py</strong>. This will be fixed soon. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">With <strong>keys.json</strong> you now have a file for any other keys and credentials your app might need later.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Click <strong>Save</strong> to save your changes.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Use the path breadcrumbs in the upper left to return to the directory in the file browser.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">4) In the PythonAnywhere file browser, you will now navigate to the <strong>settings.py</strong> file in your app folder and open it so it’s available in the editor.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Add these two lines at the top of <strong>settings.py</strong>:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-python" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk12">import</span><span class="mtk1"> </span><span class="mtk9">json</span></span><br><span><span class="mtk12">from</span><span class="mtk1"> </span><span class="mtk9">django</span><span class="mtk1">.</span><span class="mtk10">core</span><span class="mtk9">.</span><span class="mtk10">exceptions</span><span class="mtk1"> </span><span class="mtk12">import</span><span class="mtk1"> </span><span class="mtk9">ImproperlyConfigured</span></span><br></div></code></pre></pre>
<p class="p__1qg33Igem5pAgn4kPMirjw">You will soon need this code to help hide some settings info in the file system rather than exposing it in <strong>settings.py</strong>. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">5) Add the following code which will pull secure information from <strong>keys.json</strong> which you created earlier. This key file will be loaded as a Python dictionary with key:value pairs courtesy of the <code class="code__2rdF32qjRVp7mMVBHuPwDS">json.loads()</code> method. Then, we’ll define the function <code class="code__2rdF32qjRVp7mMVBHuPwDS">getKey()</code> to retrieve a particular key.</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-python" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk9">KEYSDIR</span><span class="mtk1"> =&nbsp;str(</span><span class="mtk9">BASE_DIR</span><span class="mtk1">)+</span><span class="mtk8">"/keys.json"</span></span><br><span><span> </span></span><br><span><span class="mtk12">with</span><span class="mtk1"> open(</span><span class="mtk9">KEYSDIR</span><span class="mtk1">) </span><span class="mtk12">as</span><span class="mtk1"> </span><span class="mtk9">k</span><span class="mtk1">:</span></span><br><span><span class="mtk1">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="mtk9">project_keys</span><span class="mtk1"> =&nbsp;</span><span class="mtk9">json</span><span class="mtk1">.</span><span class="mtk10">loads</span><span class="mtk1">(</span><span class="mtk9">k</span><span class="mtk1">.</span><span class="mtk10">read</span><span class="mtk1">())</span></span><br><span><span> </span></span><br><span><span class="mtk12">def getKey</span><span class="mtk1">(</span><span class="mtk9">setting</span><span class="mtk1">,</span><span class="mtk9">project_keys</span><span class="mtk1">=</span><span class="mtk9">project_keys</span><span class="mtk1">):</span></span><br><span><span class="mtk1">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="mtk12">try</span><span class="mtk1">:</span></span><br><span><span class="mtk1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="mtk12">return</span><span class="mtk1"> </span><span class="mtk9">project_keys</span><span class="mtk1">[</span><span class="mtk9">setting</span><span class="mtk1">]</span></span><br><span><span class="mtk1">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="mtk12">except</span><span class="mtk1"> </span><span class="mtk9">KeyError</span><span class="mtk1">:</span></span><br><span><span class="mtk1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="mtk9">errorMessage</span><span class="mtk1"> =&nbsp;</span><span class="mtk8">"Set the {} env var"</span><span class="mtk1">.</span><span class="mtk10">format</span><span class="mtk1">(</span><span class="mtk9">setting</span><span class="mtk1">)</span></span><br><span><span class="mtk1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="mtk12">raise</span><span class="mtk1"> </span><span class="mtk9">ImproperlyConfigured</span><span class="mtk1">(</span><span class="mtk9">errorMessage</span><span class="mtk1">)</span></span><br></div></code></pre></pre>
<p class="p__1qg33Igem5pAgn4kPMirjw">6) Find the <code class="code__2rdF32qjRVp7mMVBHuPwDS">SECRET_KEY</code> setting. This is the first thing you need to hide. Change this line to read:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-python" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk9">SECRET_KEY</span><span class="mtk1"> =&nbsp;</span><span class="mtk9">getKey</span><span class="mtk1">(</span><span class="mtk8">"SECRETKEY"</span><span class="mtk1">)</span></span><br></div></code></pre></pre>
<p class="p__1qg33Igem5pAgn4kPMirjw">You are invoking the <code class="code__2rdF32qjRVp7mMVBHuPwDS">getKey()</code> function to return the value associated with the “SECRETKEY” in the JSON file.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">7) Let’s continue fixing <strong>settings.py</strong>.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Find the <code class="code__2rdF32qjRVp7mMVBHuPwDS">ALLOWED_HOSTS</code> global variable and inside the list, add the string, making sure to change <code class="code__2rdF32qjRVp7mMVBHuPwDS">accountname</code> to your PythonAnywhere account name: </p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-python" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk8">'accountname.pythonanywhere.com'</span></span><br></div></code></pre></pre>
<p class="p__1qg33Igem5pAgn4kPMirjw">This line tells Django to trust the PythonAnywhere site to run your project.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">8) Next, find <code class="code__2rdF32qjRVp7mMVBHuPwDS">DEBUG = True</code> and change it to </p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-python" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk9">DEBUG</span><span class="mtk1"> =&nbsp;</span><span class="mtk12">False</span></span><br></div></code></pre></pre>
<p class="p__1qg33Igem5pAgn4kPMirjw">In production, you don’t want Django’s helpful <code class="code__2rdF32qjRVp7mMVBHuPwDS">DEBUG</code> mode to expose the inner workings of your app!</p>
<p class="p__1qg33Igem5pAgn4kPMirjw"><strong>NOTE</strong>: We are using SQLite as our database which is an insecure database platform. Therefore we don’t have any database credentials to secure. However, if you were using another database, such as PostgreSQL/PostGIS, you would also want to use <code class="code__2rdF32qjRVp7mMVBHuPwDS">get_key()</code> to retrieve those values as well, for example:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-python" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk9">DATABASES</span><span class="mtk1"> =&nbsp;{</span></span><br><span><span class="mtk1">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="mtk8">'default'</span><span class="mtk1">: {</span></span><br><span><span class="mtk1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="mtk8">'ENGINE'</span><span class="mtk1">: </span><span class="mtk8">'django.contrib.gis.db.backends.postgis'</span><span class="mtk1">,</span></span><br><span><span class="mtk1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="mtk8">'NAME'</span><span class="mtk1">: </span><span class="mtk9">myprojdb</span><span class="mtk1">,</span></span><br><span><span class="mtk1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="mtk8">'USER'</span><span class="mtk1">: </span><span class="mtk9">get_key</span><span class="mtk1">(</span><span class="mtk8">"DBUSER"</span><span class="mtk1">),</span></span><br><span><span class="mtk1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="mtk8">'PASSWORD'</span><span class="mtk1">: </span><span class="mtk9">get_key</span><span class="mtk1">(</span><span class="mtk8">"DBPASSWORD"</span><span class="mtk1">),</span></span><br><span><span class="mtk1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="mtk8">'HOST'</span><span class="mtk1">: </span><span class="mtk9">get_key</span><span class="mtk1">(</span><span class="mtk8">"DBHOST"</span><span class="mtk1">),</span></span><br><span><span class="mtk1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="mtk8">'PORT'</span><span class="mtk1">: </span><span class="mtk8">'5432'</span><span class="mtk1">,</span></span><br><span><span class="mtk1">&nbsp;&nbsp;&nbsp;&nbsp;}</span></span><br></div></code></pre></pre>
<p class="p__1qg33Igem5pAgn4kPMirjw">Click <strong>Save</strong> to save your changes.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">9) Finally, return to the web console and scroll down to the <strong>Security</strong> section. Note that PythonAnywhere provides you with an HTTPS certificate automatically. HTTPS gives you an extra layer of protection and you get this for free!</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">You will also want to <strong>Force HTTPS</strong> by clicking the slider to <strong>Enabled</strong>:</p>
<p class="p__1qg33Igem5pAgn4kPMirjw"><img src="https://static-assets.codecademy.com/skillpaths/django/deploying/pythonanywhere_source_code.png" alt="PythonAnywhere's console which allows you to turn on HTTPS by sliding the toggle" class="img__1JGFO2nlisObc3KeOSGPRp"></p>
<p class="p__1qg33Igem5pAgn4kPMirjw">10) You might also want to consider password-protecting your site until your development work is complete. If so you can do so here:</p>
<p class="p__1qg33Igem5pAgn4kPMirjw"><img src="https://static-assets.codecademy.com/skillpaths/django/deploying/pythonanywhere_password_protect.png" alt="PythonAnywhere's option to enable/disable password protection" class="img__1JGFO2nlisObc3KeOSGPRp"></p>
<h2 id="heading-launch" class="h2__1Ly_Sza5xVS3yZl46_StcN">Launch!</h2>
<p class="p__1qg33Igem5pAgn4kPMirjw">Scroll to the top of the web console and click the green <strong>Reload</strong> button. You should find your app at <code class="code__2rdF32qjRVp7mMVBHuPwDS">&lt;your username&gt;.pythonanywhere.com</code> in your browser. Great job! You’ve worked through the deployment steps and can now share the results of your hard work on the internet!</p>
<h2 id="heading-optional-admin-site-adjustments" class="h2__1Ly_Sza5xVS3yZl46_StcN">(Optional) Admin Site Adjustments</h2>
<p class="p__1qg33Igem5pAgn4kPMirjw">Right now your app should be running and look similar to how it did in development. However, if you try to load the admin site at <code class="code__2rdF32qjRVp7mMVBHuPwDS">yourname.pythonanywhere.com/admin</code> you may notice it looks a little… off. When you log in with your admin account, it might look something like this:</p>
<p class="p__1qg33Igem5pAgn4kPMirjw"><img src="https://static-assets.codecademy.com/skillpaths/django/deploying/unstylized_admin.png" alt="display of the admin page without CSS" class="img__1JGFO2nlisObc3KeOSGPRp">
Note: If you are working with the repo, the admin credentials are</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Username: vetadmin
Password: il0vepets (where the ‘o’ in love is a zero)</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">You may recognize this page as missing its CSS styling. The built-in CSS is provided by the Django framework and loads easily while you’re in development, but now that you have published your site to production, you will need to gather up this CSS and make it part of your web app. To do this follow these steps. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">The first thing you will need to do is create and assign a new variable in <strong>settings.py</strong>. It’s best to put this variable immediately below <code class="code__2rdF32qjRVp7mMVBHuPwDS">STATIC_URL</code> to stay organized. This setting needs to be the absolute path for the static files on PythonAnywhere’s server. The example is what you’d use if you are using Codecademy’s repo:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-python" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk9">STATIC_ROOT</span><span class="mtk1"> =&nbsp;</span><span class="mtk8">'/home/accountname/djangovet/vetoffice/static'</span></span><br></div></code></pre></pre>
<p class="p__1qg33Igem5pAgn4kPMirjw">Next, in PythonAnywhere you’ll want to navigate to your bash shell, or start a new one. Change your directory to be in the <code class="code__2rdF32qjRVp7mMVBHuPwDS">home/username/djangovet</code> folder (or wherever your project’s manage.py file resides) and type:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">$ python3.8 manage.py collectstatic</span></span><br></div></code></pre></pre><p class="p__1qg33Igem5pAgn4kPMirjw">This will be followed by a confirmation question. Type <code class="code__2rdF32qjRVp7mMVBHuPwDS">yes</code> and proceed.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">You’ll see warnings when the command finished and may ignore them. There is no need to reload your site in the web console. Simply refresh your admin page and it should look like the pretty page you remember.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw"><img src="https://static-assets.codecademy.com/skillpaths/django/deploying/stylized_admin.png" alt="display of the admin page with CSS" class="img__1JGFO2nlisObc3KeOSGPRp"></p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Congratulations! You are now fully deployed with a working and stylized admin panel!</p>
</div></div>




