<h1 class="gamut-1ewwict-Text e8i0p5k0">Revisiting Views</h1><p class="gamut-1xdcsrc-Text e8i0p5k0"><span data-testid="markdown" class="markdown__32VfO5X72_8Hgq-lL1FiEX">You’ve created your first view before, now it’s time for a deeper dive. </span></p><div class="gamut-unqu21-Box-ArticleContentContainer e1xfx7rd1"><div data-testid="markdown" class="spacing-loose__3_R8mSIQ2cspwhDGkCOXTu markdown__32VfO5X72_8Hgq-lL1FiEX darkTheme__1DQKVxwlUlCBpualn71c3Z gamut-gk1onf-ArticleMarkdown e1xfx7rd0"><p class="p__1qg33Igem5pAgn4kPMirjw">Templates show information to the user and models are the source of that information. This means we need something to determine <strong>what</strong> we should take from the source to present to our users. This is the purpose of views to act as the middleman coordinating this flow of information.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw"><img src="https://static-assets.codecademy.com/skillpaths/django/first_app/django_mtv_diagram_bg.svg" alt="Django's MTV design pattern showing how models supply the data, views determine what data to show, and templates displaying the data" class="img__1JGFO2nlisObc3KeOSGPRp"></p>
<p class="p__1qg33Igem5pAgn4kPMirjw">By setting up a view for templates, our data can be much more dynamic and render more relevant info to our users giving them a customized experience. You’ve already seen how a basic view works, now let’s learn more advanced ways of Django!</p>
</div></div>




<h1>Learn</h1>

<div class="gamut-1h3qpnn-Box ebnwbv90"><div aria-hidden="true" class="gamut-haybot-Text e8i0p5k0">Views</div><span aria-hidden="true" class="gamut-yj8jvy-Text e8i0p5k0">What are Views?</span><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__32VfO5X72_8Hgq-lL1FiEX"><p class="p__1qg33Igem5pAgn4kPMirjw"><em>Views</em> play an important role in the MTV (Model-Template-View) architectural pattern and essentially act as a link between the Model data and the Templates. A view is a function that takes in an HTTP request and returns an HTTP response. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">In Django, a response can deliver webpage content in the form of HTML and templates, however, it can also respond with an image, an XML document, etc. We can handle what kind of information will be displayed on the browser for users. We’ve already touched lightly on views in the previous lessons, but now we’re going to go in-depth and explore some of its functionalities and tools!</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">It’s important to understand that a view describes <strong>which</strong> data you see, not <strong>how</strong> you see it. You can think of a view as the middleman between the model and the template. The view will execute the business logic and interact with the model to carry data and delegate the information to the template which determines <strong>how</strong> information is displayed. </p>
</div></div></div>


<h3>Solution</h3>




<h1>Learn</h1>

<div class="gamut-1h3qpnn-Box ebnwbv90"><div aria-hidden="true" class="gamut-haybot-Text e8i0p5k0">Views</div><span aria-hidden="true" class="gamut-yj8jvy-Text e8i0p5k0">Refresher</span><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__32VfO5X72_8Hgq-lL1FiEX"><p class="p__1qg33Igem5pAgn4kPMirjw">At this stage, we’ve learned a lot about the ins and outs of Django. When working with frameworks like Django, there are a lot of moving pieces involved and the flow of how data is passed can be a bit confusing. However, do not fret, some of the following topics will look familiar so let’s recap and go a little more in-depth. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">There are a few steps that go into accessing a view via a URL:</p>
<ol class="ol__1XI8Ausmo9cwwog3NvDzWF">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">A user visits a URL which sends a request for a resource to Django (e.g. navigating to a specific endpoint).</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Django looks into the framework for that URL path. </li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">If it finds a match and the path is linked to a particular view, its view function is called.</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">The logic in that view function will be executed, usually communicating with the model and retrieving the requested data. </li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">The view then renders a template along with all the data to display it to the user. </li>
</ol>
<p class="p__1qg33Igem5pAgn4kPMirjw">In order to access a view via a URL, Django has its own way for URL mapping and it’s done by editing the project’s <strong>url.py</strong> file. As we create functions in different applications’ <strong>views.py</strong> files, we must also make sure to import said functions in the apps’ <strong>url.py</strong> file! </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Within the <strong>url.py</strong> file, the most important thing is the <code class="code__2rdF32qjRVp7mMVBHuPwDS">urlpatterns</code> list which looks like the following:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-python" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk16"># urls.py</span></span><br><span><span> </span></span><br><span><span class="mtk12">from</span><span class="mtk1"> </span><span class="mtk9">myapp</span><span class="mtk1">.</span><span class="mtk10">views</span><span class="mtk1"> </span><span class="mtk12">import</span><span class="mtk1"> </span><span class="mtk9">home_view</span></span><br><span><span> </span></span><br><span><span class="mtk9">urlpatterns</span><span class="mtk1"> =&nbsp;[</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk9">path</span><span class="mtk1">(</span><span class="mtk8">"home/"</span><span class="mtk1">, </span><span class="mtk9">home_view</span><span class="mtk1">),</span></span><br><span><span class="mtk1">]</span></span><br></div></code></pre></pre>
<p class="p__1qg33Igem5pAgn4kPMirjw">In the example above, a request to <code class="code__2rdF32qjRVp7mMVBHuPwDS">http://example.com/home</code> would point to that URL pattern and make a call to the function <code class="code__2rdF32qjRVp7mMVBHuPwDS">home_view()</code> which is found in the application’s <strong>views.py</strong> file. The logic in <code class="code__2rdF32qjRVp7mMVBHuPwDS">home_view()</code> would be executed and send back a response to the client. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Consider the <code class="code__2rdF32qjRVp7mMVBHuPwDS">home_view()</code> containing the following logic:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-python" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk16"># views.py</span></span><br><span><span> </span></span><br><span><span class="mtk12">def home_view</span><span class="mtk1">(</span><span class="mtk9">request</span><span class="mtk1">):</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk12">return</span><span class="mtk1"> </span><span class="mtk9">render</span><span class="mtk1">(</span><span class="mtk9">request</span><span class="mtk1">, </span><span class="mtk8">"template.html"</span><span class="mtk1">)</span></span><br></div></code></pre></pre>
<p class="p__1qg33Igem5pAgn4kPMirjw">Within <code class="code__2rdF32qjRVp7mMVBHuPwDS">home_view()</code> we’re also making use of the function <code class="code__2rdF32qjRVp7mMVBHuPwDS">render()</code>. As we saw prior, <code class="code__2rdF32qjRVp7mMVBHuPwDS">render()</code> is a shortcut function that takes in an <code class="code__2rdF32qjRVp7mMVBHuPwDS">HttpRequest</code> object and a template in order to display it back to the client. </p>
</div></div></div>


<h3>Instructions</h3>

<div><div aria-hidden="false"><div class="checkpoint__4BHU1WTSxj6VwmNAYRwAn" data-testid="checkpoint-satisfied"><b class="checkpointNumber__31eTdII4vTq3Axat9vAk4l">1.</b><div class="checkpointBody__1H24X3oapbMTCVrjYQ07xN"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__32VfO5X72_8Hgq-lL1FiEX"><p class="p__1qg33Igem5pAgn4kPMirjw">Navigate through the updated code in <strong>url.py</strong> and <strong>views.py</strong> in order to see how information is being passed around through the <code class="code__2rdF32qjRVp7mMVBHuPwDS">home()</code> function in <strong>vetoffice/views</strong>.</p>
</div></div></div><div class="checkpointCheckbox__2jb1qr-RgojJrXjQnCdSZB checkboxSatisfied__3GbJB-7urIzf9cVW-5ASm6"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 2 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__AUYYhFg5_aKE6p4-XN_JN"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__oSo2-lFMgoXgm-op6UgwW">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div></div>


<h3>Solution</h3>




<h1>Learn</h1>

<div class="gamut-1h3qpnn-Box ebnwbv90"><div aria-hidden="true" class="gamut-haybot-Text e8i0p5k0">Views</div><span aria-hidden="true" class="gamut-yj8jvy-Text e8i0p5k0">Class Based Views</span><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__32VfO5X72_8Hgq-lL1FiEX"><p class="p__1qg33Igem5pAgn4kPMirjw">We’ve explored how to write view functions in order to render templates and return them to the browser. In this exercise, we’ll look into how to use <em>class-based views</em> and implement <a target="_blank" rel="noopener" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://docs.djangoproject.com/en/3.1/topics/class-based-views/generic-display/">generic views</a> in order to keep our code clean and <a target="_blank" rel="noopener" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself">DRY</a>.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Django provides us with base views that are inherited from the class <code class="code__2rdF32qjRVp7mMVBHuPwDS">view</code>. A number of these existing generic view functions include built-in logic and provide utilities — better yet, we can combine these generics with our own written code!</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Consider an application that keeps track of students in a classroom. We’ll make use of a model, <code class="code__2rdF32qjRVp7mMVBHuPwDS">Student</code>, which holds the following fields:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-python" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk16"># models.py</span></span><br><span><span> </span></span><br><span><span class="mtk12">class Student</span><span class="mtk1">(</span><span class="mtk9">models</span><span class="mtk1">.</span><span class="mtk10">Model</span><span class="mtk1">):</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk9">first_name</span><span class="mtk1"> =&nbsp;</span><span class="mtk9">models</span><span class="mtk1">.</span><span class="mtk10">CharField</span><span class="mtk1">(</span><span class="mtk9">max_length</span><span class="mtk1">=</span><span class="mtk9">30</span><span class="mtk1">)</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk9">last_name</span><span class="mtk1"> =&nbsp;</span><span class="mtk9">models</span><span class="mtk1">.</span><span class="mtk10">CharField</span><span class="mtk1">(</span><span class="mtk9">max_length</span><span class="mtk1">=</span><span class="mtk9">30</span><span class="mtk1">)</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk9">grade</span><span class="mtk1"> =&nbsp;</span><span class="mtk9">models</span><span class="mtk1">.</span><span class="mtk10">CharField</span><span class="mtk1">(</span><span class="mtk9">max_length</span><span class="mtk1">=</span><span class="mtk9">30</span><span class="mtk1">)</span></span><br></div></code></pre></pre>
<p class="p__1qg33Igem5pAgn4kPMirjw">Let’s say we want to create a view that displays all of the students in a table. We could do this manually by writing a query to retrieve all the students and then pass the list to a template. Alternatively, we could make use of a generic view called <a target="_blank" rel="noopener" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://docs.djangoproject.com/en/3.1/topics/class-based-views/generic-display/"><code class="code__2rdF32qjRVp7mMVBHuPwDS">Listview</code></a>. This view does exactly what we need and takes care of the logic in order to display multiple instances of a table in the database. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">If we want to use some of these generic views we must first import them from <code class="code__2rdF32qjRVp7mMVBHuPwDS">django.views.generic</code> at the top of our file, along with our <code class="code__2rdF32qjRVp7mMVBHuPwDS">Student</code> model:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-python" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk16"># views.py</span></span><br><span><span> </span></span><br><span><span class="mtk12">from</span><span class="mtk1"> .</span><span class="mtk10">models</span><span class="mtk1"> </span><span class="mtk12">import</span><span class="mtk1"> </span><span class="mtk9">Student</span></span><br><span><span class="mtk12">from</span><span class="mtk1"> </span><span class="mtk9">django</span><span class="mtk1">.</span><span class="mtk10">views</span><span class="mtk9">.</span><span class="mtk10">generic</span><span class="mtk1"> </span><span class="mtk12">import</span><span class="mtk1"> </span><span class="mtk9">ListView</span></span><br></div></code></pre></pre>
<p class="p__1qg33Igem5pAgn4kPMirjw">Once imported we can specify what model we’ll be using the <code class="code__2rdF32qjRVp7mMVBHuPwDS">ListView</code> for:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-python" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk16"># views.py</span></span><br><span><span> </span></span><br><span><span class="mtk12">class StudentList</span><span class="mtk1">(</span><span class="mtk9">ListView</span><span class="mtk1">):</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk9">model</span><span class="mtk1"> =&nbsp;</span><span class="mtk9">Student</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk9">template_name</span><span class="mtk1"> =&nbsp;</span><span class="mtk8">"schoolapp/student.html"</span></span><br></div></code></pre></pre>
<p class="p__1qg33Igem5pAgn4kPMirjw">Notice how we changed the view from function to a class now — we even provided properties! These properties allow us to modify our view class to incorporate other information. Upon specifying the <code class="code__2rdF32qjRVp7mMVBHuPwDS">model</code> we’re using Django will automatically try to find a template in <strong>&lt;the_app_name&gt;/&lt;chosen_model_name&gt;.html</strong>. Alternatively, we could explicitly tell the view which template to use by adding a <code class="code__2rdF32qjRVp7mMVBHuPwDS">template_name</code> attribute to the view, as well as specifying the model with the <code class="code__2rdF32qjRVp7mMVBHuPwDS">model</code> attribute. In this case, we specified the <code class="code__2rdF32qjRVp7mMVBHuPwDS">model</code> as <code class="code__2rdF32qjRVp7mMVBHuPwDS">Student</code> and explicitly set <code class="code__2rdF32qjRVp7mMVBHuPwDS">template_name</code> as the <code class="code__2rdF32qjRVp7mMVBHuPwDS">"schoolapp/student.html"</code> template.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Let’s now implement the <code class="code__2rdF32qjRVp7mMVBHuPwDS">ListView</code> for both <code class="code__2rdF32qjRVp7mMVBHuPwDS">Owner</code> and <code class="code__2rdF32qjRVp7mMVBHuPwDS">Patient</code>!</p>
</div></div></div>


<h3>Instructions</h3>

<div><div aria-hidden="false"><div class="checkpoint__4BHU1WTSxj6VwmNAYRwAn" data-testid="checkpoint-satisfied"><b class="checkpointNumber__31eTdII4vTq3Axat9vAk4l">1.</b><div class="checkpointBody__1H24X3oapbMTCVrjYQ07xN"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__32VfO5X72_8Hgq-lL1FiEX"><p class="p__1qg33Igem5pAgn4kPMirjw">Please note that for this exercise, we’ve updated the application by adding templates in <strong>vetoffice/templates/</strong>. This way you can focus on adding in <code class="code__2rdF32qjRVp7mMVBHuPwDS">ListView</code>.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Before you can use <code class="code__2rdF32qjRVp7mMVBHuPwDS">ListView</code>, you have to import it from <code class="code__2rdF32qjRVp7mMVBHuPwDS">django.views.generic</code>. So let’s import that near the top of our <strong>views.py</strong> file.</p>
</div></div></div><div class="checkpointCheckbox__2jb1qr-RgojJrXjQnCdSZB checkboxSatisfied__3GbJB-7urIzf9cVW-5ASm6"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 2 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__AUYYhFg5_aKE6p4-XN_JN"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__oSo2-lFMgoXgm-op6UgwW">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div><div aria-hidden="false"><div class="checkpoint__4BHU1WTSxj6VwmNAYRwAn" data-testid="checkpoint-satisfied"><b class="checkpointNumber__31eTdII4vTq3Axat9vAk4l">2.</b><div class="checkpointBody__1H24X3oapbMTCVrjYQ07xN"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__32VfO5X72_8Hgq-lL1FiEX"><p class="p__1qg33Igem5pAgn4kPMirjw">We can now implement a <code class="code__2rdF32qjRVp7mMVBHuPwDS">ListView</code> for <code class="code__2rdF32qjRVp7mMVBHuPwDS">Owner</code>. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Create a class named <code class="code__2rdF32qjRVp7mMVBHuPwDS">OwnerList</code>:</p>
<ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Provide an argument of <code class="code__2rdF32qjRVp7mMVBHuPwDS">ListView</code></li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Set the <code class="code__2rdF32qjRVp7mMVBHuPwDS">model</code> as <code class="code__2rdF32qjRVp7mMVBHuPwDS">Owner</code></li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Set the <code class="code__2rdF32qjRVp7mMVBHuPwDS">template_name</code> as <code class="code__2rdF32qjRVp7mMVBHuPwDS">"vetoffice/owner_list.html"</code>  </li>
</ul>
</div></div></div><div class="checkpointCheckbox__2jb1qr-RgojJrXjQnCdSZB checkboxSatisfied__3GbJB-7urIzf9cVW-5ASm6"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 3 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__AUYYhFg5_aKE6p4-XN_JN"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__oSo2-lFMgoXgm-op6UgwW">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div><div aria-hidden="false"><div class="checkpoint__4BHU1WTSxj6VwmNAYRwAn" data-testid="checkpoint-satisfied"><b class="checkpointNumber__31eTdII4vTq3Axat9vAk4l">3.</b><div class="checkpointBody__1H24X3oapbMTCVrjYQ07xN"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__32VfO5X72_8Hgq-lL1FiEX"><p class="p__1qg33Igem5pAgn4kPMirjw">Practice makes perfect, use what you learned for <code class="code__2rdF32qjRVp7mMVBHuPwDS">OwnerList</code> and implement a <code class="code__2rdF32qjRVp7mMVBHuPwDS">ListView</code> for <code class="code__2rdF32qjRVp7mMVBHuPwDS">Patient</code>!</p>
</div></div></div><div class="checkpointCheckbox__2jb1qr-RgojJrXjQnCdSZB checkboxSatisfied__3GbJB-7urIzf9cVW-5ASm6"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 4 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__AUYYhFg5_aKE6p4-XN_JN"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__oSo2-lFMgoXgm-op6UgwW">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div></div>


<h3>Solution</h3>




<h1>Learn</h1>

<div class="gamut-1h3qpnn-Box ebnwbv90"><div aria-hidden="true" class="gamut-haybot-Text e8i0p5k0">Views</div><span aria-hidden="true" class="gamut-yj8jvy-Text e8i0p5k0">CRUD through Class Based Views</span><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__32VfO5X72_8Hgq-lL1FiEX"><p class="p__1qg33Igem5pAgn4kPMirjw">Class-based views set up a lot of functionality automatically for us. In the previous exercise, we were able to list out (i.e. <strong>R</strong>ead) instances. This time around let’s add in the rest of the <strong>CRUD</strong> functionality using <a target="_blank" rel="noopener" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://docs.djangoproject.com/en/3.1/topics/class-based-views/generic-display/">generic views</a>.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">The same general syntax patterns exist for all 4 generic views, however, there are some slight differences. For example, if we go back to thinking about a <code class="code__2rdF32qjRVp7mMVBHuPwDS">Student</code> model, here’s how we could add a view to create a <code class="code__2rdF32qjRVp7mMVBHuPwDS">Student</code> instance: </p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-python" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk16"># views.py</span></span><br><span><span> </span></span><br><span><span class="mtk12">from</span><span class="mtk1"> .</span><span class="mtk10">models</span><span class="mtk1"> </span><span class="mtk12">import</span><span class="mtk1"> </span><span class="mtk9">Student</span></span><br><span><span class="mtk12">from</span><span class="mtk1"> </span><span class="mtk9">django</span><span class="mtk1">.</span><span class="mtk10">views</span><span class="mtk9">.</span><span class="mtk10">generic</span><span class="mtk1"> </span><span class="mtk12">import</span><span class="mtk1"> </span><span class="mtk9">ListView</span></span><br><span><span class="mtk12">from</span><span class="mtk1"> </span><span class="mtk9">django</span><span class="mtk1">.</span><span class="mtk10">views</span><span class="mtk9">.</span><span class="mtk10">generic</span><span class="mtk9">.</span><span class="mtk10">edit</span><span class="mtk1"> </span><span class="mtk12">import</span><span class="mtk1"> </span><span class="mtk9">CreateView</span></span><br><span><span> </span></span><br><span><span class="mtk12">class StudentCreate</span><span class="mtk1">(</span><span class="mtk9">CreateView</span><span class="mtk1">):</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk9">model</span><span class="mtk1"> =&nbsp;</span><span class="mtk9">Student</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk9">template_name</span><span class="mtk1"> =&nbsp;</span><span class="mtk8">"schoolapp/student_create_form.html"</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk9">fields</span><span class="mtk1"> =&nbsp;[</span><span class="mtk8">"first_name"</span><span class="mtk1">, </span><span class="mtk8">"last_name"</span><span class="mtk1">, </span><span class="mtk8">"grade"</span><span class="mtk1">]</span></span><br></div></code></pre></pre>
<p class="p__1qg33Igem5pAgn4kPMirjw">The syntax looks very similar, but let’s go over some key differences:</p>
<ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Notice that we first have also import <code class="code__2rdF32qjRVp7mMVBHuPwDS">CreateView</code> from another module, <code class="code__2rdF32qjRVp7mMVBHuPwDS">django.views.generic.edit</code>. </li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">In the new class’s name, we append <code class="code__2rdF32qjRVp7mMVBHuPwDS">Create</code> to the model name to get <code class="code__2rdF32qjRVp7mMVBHuPwDS">StudentCreate</code>. </li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">The argument is also different and is now <code class="code__2rdF32qjRVp7mMVBHuPwDS">CreateView</code>. </li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">The <code class="code__2rdF32qjRVp7mMVBHuPwDS">model</code> remains the same, we still need to set the model we want this view to reference. </li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">The template (<code class="code__2rdF32qjRVp7mMVBHuPwDS">template_name</code>) is also different. That is because to create a <code class="code__2rdF32qjRVp7mMVBHuPwDS">Student</code> instance, we’ll need to get some user input which means we should create a form template! </li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Speaking of input, to know what should go in the form, we have to provide a <code class="code__2rdF32qjRVp7mMVBHuPwDS">fields</code> property. This is an array that contains a list of the model’s fields as strings. <ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">In this case, we’re supplying our form template will include the options to fill in information about a student’s “first_name”, “last_name”, and “grade”.</li>
</ul>
</li>
</ul>
<p class="p__1qg33Igem5pAgn4kPMirjw"><strong>Note</strong>: We’ll cover more on forms later, for now, we’ll focus on setting up the views. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Both the <code class="code__2rdF32qjRVp7mMVBHuPwDS">UpdateView</code> and <code class="code__2rdF32qjRVp7mMVBHuPwDS">DeleteView</code> resemble <code class="code__2rdF32qjRVp7mMVBHuPwDS">CreateView</code> very closely — so let’s learn how to implement both by writing them ourselves! </p>
</div></div></div>


<h3>Instructions</h3>

<div><div aria-hidden="false"><div class="checkpoint__4BHU1WTSxj6VwmNAYRwAn" data-testid="checkpoint-satisfied"><b class="checkpointNumber__31eTdII4vTq3Axat9vAk4l">1.</b><div class="checkpointBody__1H24X3oapbMTCVrjYQ07xN"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__32VfO5X72_8Hgq-lL1FiEX"><p class="p__1qg33Igem5pAgn4kPMirjw">As mentioned in the previous exercise we’ve already added the necessary templates in <strong>vetoffice/templates/</strong> for you! </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Therefore, let’s start by importing all of our generic views at the top of our file.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">From <code class="code__2rdF32qjRVp7mMVBHuPwDS">django.views.generic.edit</code>, import the three generic views: <code class="code__2rdF32qjRVp7mMVBHuPwDS">CreateView</code>, <code class="code__2rdF32qjRVp7mMVBHuPwDS">UpdateView</code>, and <code class="code__2rdF32qjRVp7mMVBHuPwDS">DeleteView</code>. </p>
</div></div></div><div class="checkpointCheckbox__2jb1qr-RgojJrXjQnCdSZB checkboxSatisfied__3GbJB-7urIzf9cVW-5ASm6"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 2 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__AUYYhFg5_aKE6p4-XN_JN"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__oSo2-lFMgoXgm-op6UgwW">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div><div aria-hidden="false"><div class="checkpoint__4BHU1WTSxj6VwmNAYRwAn" data-testid="checkpoint-satisfied"><b class="checkpointNumber__31eTdII4vTq3Axat9vAk4l">2.</b><div class="checkpointBody__1H24X3oapbMTCVrjYQ07xN"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__32VfO5X72_8Hgq-lL1FiEX"><p class="p__1qg33Igem5pAgn4kPMirjw">Now, let’s create a different type of generic view with <code class="code__2rdF32qjRVp7mMVBHuPwDS">CreateView</code> for <code class="code__2rdF32qjRVp7mMVBHuPwDS">Owner</code>.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Create a class named <code class="code__2rdF32qjRVp7mMVBHuPwDS">OwnerCreate</code> with <code class="code__2rdF32qjRVp7mMVBHuPwDS">CreateView</code> as an argument. In its properties, set:</p>
<ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><code class="code__2rdF32qjRVp7mMVBHuPwDS">model</code> as <code class="code__2rdF32qjRVp7mMVBHuPwDS">Owner</code></li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><code class="code__2rdF32qjRVp7mMVBHuPwDS">template_name</code> as <code class="code__2rdF32qjRVp7mMVBHuPwDS">"vetoffice/owner_create_form.html"</code></li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><code class="code__2rdF32qjRVp7mMVBHuPwDS">fields</code> as <code class="code__2rdF32qjRVp7mMVBHuPwDS">["first_name", "last_name", "phone"]</code></li>
</ul>
</div></div></div><div class="checkpointCheckbox__2jb1qr-RgojJrXjQnCdSZB checkboxSatisfied__3GbJB-7urIzf9cVW-5ASm6"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 3 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__AUYYhFg5_aKE6p4-XN_JN"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__oSo2-lFMgoXgm-op6UgwW">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div><div aria-hidden="false"><div class="checkpoint__4BHU1WTSxj6VwmNAYRwAn" data-testid="checkpoint-satisfied"><b class="checkpointNumber__31eTdII4vTq3Axat9vAk4l">3.</b><div class="checkpointBody__1H24X3oapbMTCVrjYQ07xN"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__32VfO5X72_8Hgq-lL1FiEX"><p class="p__1qg33Igem5pAgn4kPMirjw">Using the same convention that you used to set up <code class="code__2rdF32qjRVp7mMVBHuPwDS">CreateView</code> for <code class="code__2rdF32qjRVp7mMVBHuPwDS">Owner</code>, now set up the <code class="code__2rdF32qjRVp7mMVBHuPwDS">CreateView</code> for <code class="code__2rdF32qjRVp7mMVBHuPwDS">Patient</code>.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Remember:</p>
<ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Provide the same naming convention (but for a different model)</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Assign the correct argument</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Provide the correct properties, set:<ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">The <code class="code__2rdF32qjRVp7mMVBHuPwDS">model</code> property</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">The correct <code class="code__2rdF32qjRVp7mMVBHuPwDS">template_name</code></li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">The <code class="code__2rdF32qjRVp7mMVBHuPwDS">fields</code> containing: <code class="code__2rdF32qjRVp7mMVBHuPwDS">"animal_type"</code>, <code class="code__2rdF32qjRVp7mMVBHuPwDS">"breed"</code>, <code class="code__2rdF32qjRVp7mMVBHuPwDS">"pet_name"</code>, <code class="code__2rdF32qjRVp7mMVBHuPwDS">"age"</code>, <code class="code__2rdF32qjRVp7mMVBHuPwDS">"owner"</code> </li>
</ul>
</li>
</ul>
</div></div></div><div class="checkpointCheckbox__2jb1qr-RgojJrXjQnCdSZB checkboxSatisfied__3GbJB-7urIzf9cVW-5ASm6"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 4 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__AUYYhFg5_aKE6p4-XN_JN"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__oSo2-lFMgoXgm-op6UgwW">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div><div aria-hidden="false"><div class="checkpoint__4BHU1WTSxj6VwmNAYRwAn" data-testid="checkpoint-satisfied"><b class="checkpointNumber__31eTdII4vTq3Axat9vAk4l">4.</b><div class="checkpointBody__1H24X3oapbMTCVrjYQ07xN"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__32VfO5X72_8Hgq-lL1FiEX"><p class="p__1qg33Igem5pAgn4kPMirjw">The <code class="code__2rdF32qjRVp7mMVBHuPwDS">UpdateView</code> for both <code class="code__2rdF32qjRVp7mMVBHuPwDS">Owner</code> and <code class="code__2rdF32qjRVp7mMVBHuPwDS">Patient</code> will look very similar to what you’ve already done for <code class="code__2rdF32qjRVp7mMVBHuPwDS">CreateView</code>.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">First, start with the <code class="code__2rdF32qjRVp7mMVBHuPwDS">UpdateView</code> for <code class="code__2rdF32qjRVp7mMVBHuPwDS">Owner</code>:</p>
<ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Create a class named <code class="code__2rdF32qjRVp7mMVBHuPwDS">OwnerUpdate</code> with an argument of <code class="code__2rdF32qjRVp7mMVBHuPwDS">UpdateView</code></li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Set <code class="code__2rdF32qjRVp7mMVBHuPwDS">model</code> as <code class="code__2rdF32qjRVp7mMVBHuPwDS">Owner</code></li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Set <code class="code__2rdF32qjRVp7mMVBHuPwDS">template_name</code> as <code class="code__2rdF32qjRVp7mMVBHuPwDS">"vetoffice/owner_update_form.html"</code></li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Set <code class="code__2rdF32qjRVp7mMVBHuPwDS">fields</code> as a list containing the same values as the <code class="code__2rdF32qjRVp7mMVBHuPwDS">CreateView</code></li>
</ul>
<p class="p__1qg33Igem5pAgn4kPMirjw">Then, repeat the same general steps but for <code class="code__2rdF32qjRVp7mMVBHuPwDS">Patient</code>. </p>
</div></div></div><div class="checkpointCheckbox__2jb1qr-RgojJrXjQnCdSZB checkboxSatisfied__3GbJB-7urIzf9cVW-5ASm6"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 5 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__AUYYhFg5_aKE6p4-XN_JN"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__oSo2-lFMgoXgm-op6UgwW">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div><div aria-hidden="false"><div class="checkpoint__4BHU1WTSxj6VwmNAYRwAn" data-testid="checkpoint-satisfied"><b class="checkpointNumber__31eTdII4vTq3Axat9vAk4l">5.</b><div class="checkpointBody__1H24X3oapbMTCVrjYQ07xN"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__32VfO5X72_8Hgq-lL1FiEX"><p class="p__1qg33Igem5pAgn4kPMirjw">Almost done! The only thing left is <code class="code__2rdF32qjRVp7mMVBHuPwDS">DeleteView</code>.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Using what you’ve learned, create new <code class="code__2rdF32qjRVp7mMVBHuPwDS">DeleteView</code> classes for <code class="code__2rdF32qjRVp7mMVBHuPwDS">Owner</code> and <code class="code__2rdF32qjRVp7mMVBHuPwDS">Patient</code>. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">With <code class="code__2rdF32qjRVp7mMVBHuPwDS">DeleteView</code>, there’s no need to add in <code class="code__2rdF32qjRVp7mMVBHuPwDS">fields</code> since if we’re deleting an instance, we’ll delete everything associated with that instance. </p>
</div></div></div><div class="checkpointCheckbox__2jb1qr-RgojJrXjQnCdSZB checkboxSatisfied__3GbJB-7urIzf9cVW-5ASm6"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 6 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__AUYYhFg5_aKE6p4-XN_JN"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__oSo2-lFMgoXgm-op6UgwW">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div></div>


<h3>Solution</h3>




<h1>Learn</h1>

<div class="gamut-1h3qpnn-Box ebnwbv90"><div aria-hidden="true" class="gamut-haybot-Text e8i0p5k0">Views</div><span aria-hidden="true" class="gamut-yj8jvy-Text e8i0p5k0">Adding Views to urls.py</span><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__32VfO5X72_8Hgq-lL1FiEX"><p class="p__1qg33Igem5pAgn4kPMirjw">Now that we have completed the logic to work with class-based views, we can implement them into our <a target="_blank" rel="noopener" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://docs.djangoproject.com/en/3.1/topics/http/urls/#overview">URLconf</a> so that they’re accessible when navigating to specific endpoints. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">However, there’s a problem because Django’s URL resolver is expecting to send a request to a callable function, not a class! Therefore, class-based views have a <a target="_blank" rel="noopener" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://docs.djangoproject.com/en/3.1/ref/class-based-views/base/#django.views.generic.base.view.as_view"><code class="code__2rdF32qjRVp7mMVBHuPwDS">.as_view()</code> method</a>, which works its magic in order to render the appropriate logic:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-python" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk16"># urls.py</span></span><br><span><span> </span></span><br><span><span class="mtk9">urlpatterns</span><span class="mtk1"> =&nbsp;[</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk9">path</span><span class="mtk1">(</span><span class="mtk8">"students/"</span><span class="mtk1">, </span><span class="mtk9">views</span><span class="mtk1">.</span><span class="mtk10">StudentList</span><span class="mtk9">.</span><span class="mtk10">as_view</span><span class="mtk1">(), </span><span class="mtk9">name</span><span class="mtk1">=</span><span class="mtk8">"studentlist"</span><span class="mtk1">)</span></span><br><span><span class="mtk1">]</span></span><br></div></code></pre></pre>
<p class="p__1qg33Igem5pAgn4kPMirjw">In the code above, we’re making a call to <code class="code__2rdF32qjRVp7mMVBHuPwDS">.as_view()</code> which is a class method for our generic view, <code class="code__2rdF32qjRVp7mMVBHuPwDS">StudentList</code>. We’re also adding the <code class="code__2rdF32qjRVp7mMVBHuPwDS">name</code> attribute here. By assigning a name, we can quickly reference this URL using its <code class="code__2rdF32qjRVp7mMVBHuPwDS">name</code> value in our views and templates instead of the entire lengthy URL. Now, if we make any future changes made to the URL path, Django automatically updates the URL definitions in view methods and templates. Therefore, even if the URL path changes, the <code class="code__2rdF32qjRVp7mMVBHuPwDS">name</code> remains the same and Django will know from the <code class="code__2rdF32qjRVp7mMVBHuPwDS">name</code> what the updated URL path is. We’ll see this behavior in later lessons when we reference a URL path in templates or redirections.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Once implemented, we can access the path <code class="code__2rdF32qjRVp7mMVBHuPwDS">students/</code> and our template will be rendered along with the data from our database regarding all the students. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Let’s add some paths to list out instances and also write a new path that will help create instances! In the next exercise, we’ll make our list route fully functionally by adding the rest of CRUD.  </p>
</div></div></div>


<h3>Instructions</h3>

<div><div aria-hidden="false"><div class="checkpoint__4BHU1WTSxj6VwmNAYRwAn" data-testid="checkpoint-satisfied"><b class="checkpointNumber__31eTdII4vTq3Axat9vAk4l">1.</b><div class="checkpointBody__1H24X3oapbMTCVrjYQ07xN"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__32VfO5X72_8Hgq-lL1FiEX"><p class="p__1qg33Igem5pAgn4kPMirjw">You’ll now get to create these new paths for both <code class="code__2rdF32qjRVp7mMVBHuPwDS">Owner</code> and <code class="code__2rdF32qjRVp7mMVBHuPwDS">Patient</code>. Let’s start first with the <code class="code__2rdF32qjRVp7mMVBHuPwDS">Owner</code> list: </p>
<ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">In <code class="code__2rdF32qjRVp7mMVBHuPwDS">urlpatterns</code> add a <code class="code__2rdF32qjRVp7mMVBHuPwDS">path()</code> for <code class="code__2rdF32qjRVp7mMVBHuPwDS">"owner/list"</code> </li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Add <code class="code__2rdF32qjRVp7mMVBHuPwDS">views.OwnerList</code> as the second argument. <ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Make the view callable by using the <code class="code__2rdF32qjRVp7mMVBHuPwDS">.as_view()</code> method. </li>
</ul>
</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Assign <code class="code__2rdF32qjRVp7mMVBHuPwDS">"ownerlist"</code> as the <code class="code__2rdF32qjRVp7mMVBHuPwDS">name</code> attribute.</li>
</ul>
</div></div></div><div class="checkpointCheckbox__2jb1qr-RgojJrXjQnCdSZB checkboxSatisfied__3GbJB-7urIzf9cVW-5ASm6"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 2 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__AUYYhFg5_aKE6p4-XN_JN"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__oSo2-lFMgoXgm-op6UgwW">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div><div aria-hidden="false"><div class="checkpoint__4BHU1WTSxj6VwmNAYRwAn" data-testid="checkpoint-satisfied"><b class="checkpointNumber__31eTdII4vTq3Axat9vAk4l">2.</b><div class="checkpointBody__1H24X3oapbMTCVrjYQ07xN"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__32VfO5X72_8Hgq-lL1FiEX"><p class="p__1qg33Igem5pAgn4kPMirjw">Now it’s time for <code class="code__2rdF32qjRVp7mMVBHuPwDS">Patient</code>!</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Let’s create a new <code class="code__2rdF32qjRVp7mMVBHuPwDS">path()</code> for <code class="code__2rdF32qjRVp7mMVBHuPwDS">"patient/list"</code> in <code class="code__2rdF32qjRVp7mMVBHuPwDS">urlpatterns</code>. For the second argument, use <code class="code__2rdF32qjRVp7mMVBHuPwDS">views.PatientList</code> and make it a callable view as well. Lastly, give it a <code class="code__2rdF32qjRVp7mMVBHuPwDS">name</code> of <code class="code__2rdF32qjRVp7mMVBHuPwDS">"patientlist"</code>. </p>
</div></div></div><div class="checkpointCheckbox__2jb1qr-RgojJrXjQnCdSZB checkboxSatisfied__3GbJB-7urIzf9cVW-5ASm6"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 3 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__AUYYhFg5_aKE6p4-XN_JN"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__oSo2-lFMgoXgm-op6UgwW">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div><div aria-hidden="false"><div class="checkpoint__4BHU1WTSxj6VwmNAYRwAn" data-testid="checkpoint-satisfied"><b class="checkpointNumber__31eTdII4vTq3Axat9vAk4l">3.</b><div class="checkpointBody__1H24X3oapbMTCVrjYQ07xN"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__32VfO5X72_8Hgq-lL1FiEX"><p class="p__1qg33Igem5pAgn4kPMirjw">A path for creation follows a similar syntax as listing instances. Let’s make one for <code class="code__2rdF32qjRVp7mMVBHuPwDS">Owner</code>.</p>
<ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Add a path for <code class="code__2rdF32qjRVp7mMVBHuPwDS">"owner/create"</code></li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">This path should use the <code class="code__2rdF32qjRVp7mMVBHuPwDS">OwnerCreate</code> view</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Provide a <code class="code__2rdF32qjRVp7mMVBHuPwDS">name</code> of <code class="code__2rdF32qjRVp7mMVBHuPwDS">"ownercreate"</code>. </li>
</ul>
</div></div></div><div class="checkpointCheckbox__2jb1qr-RgojJrXjQnCdSZB checkboxSatisfied__3GbJB-7urIzf9cVW-5ASm6"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 4 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__AUYYhFg5_aKE6p4-XN_JN"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__oSo2-lFMgoXgm-op6UgwW">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div><div aria-hidden="false"><div class="checkpoint__4BHU1WTSxj6VwmNAYRwAn" data-testid="checkpoint-satisfied"><b class="checkpointNumber__31eTdII4vTq3Axat9vAk4l">4.</b><div class="checkpointBody__1H24X3oapbMTCVrjYQ07xN"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__32VfO5X72_8Hgq-lL1FiEX"><p class="p__1qg33Igem5pAgn4kPMirjw">Great job! The creation path for <code class="code__2rdF32qjRVp7mMVBHuPwDS">Owner</code> is set up, now it’s time for <code class="code__2rdF32qjRVp7mMVBHuPwDS">Patient</code>.</p>
<ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Create another path of <code class="code__2rdF32qjRVp7mMVBHuPwDS">"patient/create"</code></li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Use the <code class="code__2rdF32qjRVp7mMVBHuPwDS">PatientCreate</code> view</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Set <code class="code__2rdF32qjRVp7mMVBHuPwDS">name</code> as <code class="code__2rdF32qjRVp7mMVBHuPwDS">"patientcreate"</code></li>
</ul>
<p class="p__1qg33Igem5pAgn4kPMirjw"><strong>Note</strong>: Because of how we set up our provided templates, we’ll need to set up the update view and delete view before we can see the actual page. This will happen in the next exercise! </p>
</div></div></div><div class="checkpointCheckbox__2jb1qr-RgojJrXjQnCdSZB checkboxSatisfied__3GbJB-7urIzf9cVW-5ASm6"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 5 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__AUYYhFg5_aKE6p4-XN_JN"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__oSo2-lFMgoXgm-op6UgwW">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div></div>


<h3>Solution</h3>




<h1>Learn</h1>

<div class="gamut-1h3qpnn-Box ebnwbv90"><div aria-hidden="true" class="gamut-haybot-Text e8i0p5k0">Views</div><span aria-hidden="true" class="gamut-yj8jvy-Text e8i0p5k0">Using Primary Keys in URLs</span><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__32VfO5X72_8Hgq-lL1FiEX"><p class="p__1qg33Igem5pAgn4kPMirjw">We just saw how we can view an entire list of models and create new models. But what if we want to access existing individual instances by updating or deleting them? </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">In this case, we can make use of our model’s primary key (also known as the ID). To navigate to a specific record of an instance, a primary key will be attached to our path. Let’s say we land on our <code class="code__2rdF32qjRVp7mMVBHuPwDS">Student</code> list page and we’ve displayed a table of students. We click on the 10th student on the list and we’re directed to the path: <code class="code__2rdF32qjRVp7mMVBHuPwDS">student/10</code>. In our URLconf, we can capture this primary key by using angle brackets:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-python" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk16"># urls.py</span></span><br><span><span> </span></span><br><span><span class="mtk9">urlpatterns</span><span class="mtk1"> =&nbsp;[</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk16"># ... Other paths</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk9">path</span><span class="mtk1">(</span><span class="mtk8">"students/"</span><span class="mtk1">, </span><span class="mtk9">views</span><span class="mtk1">.</span><span class="mtk10">StudentList</span><span class="mtk9">.</span><span class="mtk10">as_view</span><span class="mtk1">(), </span><span class="mtk9">name</span><span class="mtk1">=</span><span class="mtk8">"studentlist"</span><span class="mtk1">),</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk9">path</span><span class="mtk1">(</span><span class="mtk8">"students/&lt;pk&gt;"</span><span class="mtk1">, </span><span class="mtk9">views</span><span class="mtk1">.</span><span class="mtk10">StudentUpdate</span><span class="mtk9">.</span><span class="mtk10">as_view</span><span class="mtk1">(), </span><span class="mtk9">name</span><span class="mtk1">=</span><span class="mtk8">"studentupdate"</span><span class="mtk1">)</span></span><br><span><span class="mtk1">]</span></span><br></div></code></pre></pre>
<p class="p__1qg33Igem5pAgn4kPMirjw">In this case, Django knows to look for the primary key (the value is replaced by the placeholder: <code class="code__2rdF32qjRVp7mMVBHuPwDS">&lt;pk&gt;</code>) in our database and render that specific record.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">If we navigate to <code class="code__2rdF32qjRVp7mMVBHuPwDS">students/4</code>, Django would grab the value, <code class="code__2rdF32qjRVp7mMVBHuPwDS">4</code>, as the primary key and access the database in order to retrieve that record. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Notice that the other than the <code class="code__2rdF32qjRVp7mMVBHuPwDS">&lt;pk&gt;</code> portion, we’re using the same syntax. Again, <code class="code__2rdF32qjRVp7mMVBHuPwDS">views.StudentUpdate.as_view()</code> is the second argument — the intention is for this view to allow users to change/update specific students’ information. We’ve also given a <code class="code__2rdF32qjRVp7mMVBHuPwDS">name</code> value so we can reference it in the future. This way, we’ll be able to access any student and render their information dynamically!</p>
</div></div></div>


<h3>Instructions</h3>

<div><div aria-hidden="false"><div class="checkpoint__4BHU1WTSxj6VwmNAYRwAn" data-testid="checkpoint-satisfied"><b class="checkpointNumber__31eTdII4vTq3Axat9vAk4l">1.</b><div class="checkpointBody__1H24X3oapbMTCVrjYQ07xN"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__32VfO5X72_8Hgq-lL1FiEX"><p class="p__1qg33Igem5pAgn4kPMirjw">Previously, we added paths to view all the owners and patients and create them, let’s add the rest of CRUD — starting with update.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">In <strong>urls.py</strong> add a path for <code class="code__2rdF32qjRVp7mMVBHuPwDS">"owner/update/&lt;pk&gt;"</code>:</p>
<ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Use the <code class="code__2rdF32qjRVp7mMVBHuPwDS">OwnerUpdate</code> view</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Set <code class="code__2rdF32qjRVp7mMVBHuPwDS">name</code> as <code class="code__2rdF32qjRVp7mMVBHuPwDS">"ownerupdate"</code></li>
</ul>
</div></div></div><div class="checkpointCheckbox__2jb1qr-RgojJrXjQnCdSZB checkboxSatisfied__3GbJB-7urIzf9cVW-5ASm6"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 2 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__AUYYhFg5_aKE6p4-XN_JN"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__oSo2-lFMgoXgm-op6UgwW">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div><div aria-hidden="false"><div class="checkpoint__4BHU1WTSxj6VwmNAYRwAn" data-testid="checkpoint-satisfied"><b class="checkpointNumber__31eTdII4vTq3Axat9vAk4l">2.</b><div class="checkpointBody__1H24X3oapbMTCVrjYQ07xN"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__32VfO5X72_8Hgq-lL1FiEX"><p class="p__1qg33Igem5pAgn4kPMirjw">Now, you’ll need an update path for <code class="code__2rdF32qjRVp7mMVBHuPwDS">Patient</code>!</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Create a path for <code class="code__2rdF32qjRVp7mMVBHuPwDS">"patient/update/&lt;pk&gt;"</code> using what you know about paths. </p>
</div></div></div><div class="checkpointCheckbox__2jb1qr-RgojJrXjQnCdSZB checkboxSatisfied__3GbJB-7urIzf9cVW-5ASm6"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 3 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__AUYYhFg5_aKE6p4-XN_JN"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__oSo2-lFMgoXgm-op6UgwW">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div><div aria-hidden="false"><div class="checkpoint__4BHU1WTSxj6VwmNAYRwAn" data-testid="checkpoint-satisfied"><b class="checkpointNumber__31eTdII4vTq3Axat9vAk4l">3.</b><div class="checkpointBody__1H24X3oapbMTCVrjYQ07xN"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__32VfO5X72_8Hgq-lL1FiEX"><p class="p__1qg33Igem5pAgn4kPMirjw">Lastly, we need to be able to delete owners and patients. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Create two paths, one for <code class="code__2rdF32qjRVp7mMVBHuPwDS">"owner/delete/&lt;pk&gt;"</code> and another for <code class="code__2rdF32qjRVp7mMVBHuPwDS">"patient/delete/&lt;pk&gt;"</code>. Remember to pass in the <code class="code__2rdF32qjRVp7mMVBHuPwDS">OwnerDelete</code> and <code class="code__2rdF32qjRVp7mMVBHuPwDS">PatientDelete</code> views give them the names <code class="code__2rdF32qjRVp7mMVBHuPwDS">"ownerdelete"</code> and <code class="code__2rdF32qjRVp7mMVBHuPwDS">"patientdelete"</code>, respectively.</p>
</div></div></div><div class="checkpointCheckbox__2jb1qr-RgojJrXjQnCdSZB checkboxSatisfied__3GbJB-7urIzf9cVW-5ASm6"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 4 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__AUYYhFg5_aKE6p4-XN_JN"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__oSo2-lFMgoXgm-op6UgwW">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div><div aria-hidden="false"><div class="checkpoint__4BHU1WTSxj6VwmNAYRwAn" data-testid="checkpoint-satisfied"><b class="checkpointNumber__31eTdII4vTq3Axat9vAk4l">4.</b><div class="checkpointBody__1H24X3oapbMTCVrjYQ07xN"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__32VfO5X72_8Hgq-lL1FiEX"><p class="p__1qg33Igem5pAgn4kPMirjw">Great job! You’ve now set up your <code class="code__2rdF32qjRVp7mMVBHuPwDS">path()</code>s so check out <code class="code__2rdF32qjRVp7mMVBHuPwDS">http://localhost:8000/vetoffice/owner/list</code> and <code class="code__2rdF32qjRVp7mMVBHuPwDS">http://localhost:8000/vetoffice/patient/list</code> in the mini-browser to see all the <code class="code__2rdF32qjRVp7mMVBHuPwDS">Owner</code> and <code class="code__2rdF32qjRVp7mMVBHuPwDS">Patient</code> objects! You can also see the CRUD paths as well. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">See what happens when you comment out, or remove, a <code class="code__2rdF32qjRVp7mMVBHuPwDS">path()</code> in <code class="code__2rdF32qjRVp7mMVBHuPwDS">urlpatterns</code>! Once you’re done exploring the code, click “Run” to move on to the next exercise.  </p>
</div></div></div><div class="checkpointCheckbox__2jb1qr-RgojJrXjQnCdSZB checkboxSatisfied__3GbJB-7urIzf9cVW-5ASm6"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 5 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__AUYYhFg5_aKE6p4-XN_JN"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__oSo2-lFMgoXgm-op6UgwW">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div></div>


<h3>Solution</h3>




<h1>Learn</h1>

<div class="gamut-1h3qpnn-Box ebnwbv90"><div aria-hidden="true" class="gamut-haybot-Text e8i0p5k0">Views</div><span aria-hidden="true" class="gamut-yj8jvy-Text e8i0p5k0">Rendering a 404</span><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__32VfO5X72_8Hgq-lL1FiEX"><p class="p__1qg33Igem5pAgn4kPMirjw">We’ve seen how to make use of views and templates by delegating data and rendering different content. However, what if a user tries to navigate to a non-existing page? In that case, it would be useful to return a <a target="_blank" rel="noopener" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404">404 page</a> that tells our users that such a page doesn’t exist! </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">This behavior is so common that Django even provides a built-in view to serve a <code class="code__2rdF32qjRVp7mMVBHuPwDS">404</code> page! We need to import the <a target="_blank" rel="noopener" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://docs.djangoproject.com/en/3.1/topics/http/views/#django.http.Http404"><code class="code__2rdF32qjRVp7mMVBHuPwDS">Http404</code>class</a> — which is an <em>exception class</em>, meaning it’ll return an error.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">It’s important to write out code that takes into account any potential errors. So we have to figure out what conditions might lead to a 404 error being raised and make sure we handle that exception. We can do this by adding a <code class="code__2rdF32qjRVp7mMVBHuPwDS">try</code> /<code class="code__2rdF32qjRVp7mMVBHuPwDS">except</code> statement. The <code class="code__2rdF32qjRVp7mMVBHuPwDS">try</code> block lets us test a block of code for errors and if an error is found, the <code class="code__2rdF32qjRVp7mMVBHuPwDS">except</code> block will be executed. For example:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-python" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk12">from</span><span class="mtk1"> </span><span class="mtk9">django</span><span class="mtk1">.</span><span class="mtk10">http</span><span class="mtk1"> </span><span class="mtk12">import</span><span class="mtk1"> </span><span class="mtk9">Http404</span></span><br><span><span> </span></span><br><span><span class="mtk12">def product_detail_view</span><span class="mtk1">(</span><span class="mtk9">request</span><span class="mtk1">, id):</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk12">try</span><span class="mtk1">:</span></span><br><span><span class="mtk1">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="mtk9">obj</span><span class="mtk1"> =&nbsp;</span><span class="mtk9">Products</span><span class="mtk1">.</span><span class="mtk10">objects</span><span class="mtk9">.</span><span class="mtk10">get</span><span class="mtk1">(</span><span class="mtk9">pk</span><span class="mtk1">=id)</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk12">except</span><span class="mtk1"> </span><span class="mtk9">Products</span><span class="mtk1">.</span><span class="mtk10">DoesNotExist</span><span class="mtk1">:</span></span><br><span><span class="mtk1">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="mtk12">raise</span><span class="mtk1"> </span><span class="mtk9">Http404</span><span class="mtk1">()</span></span><br><span><span> </span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk12">return</span><span class="mtk1"> </span><span class="mtk9">render</span><span class="mtk1">(</span><span class="mtk9">request</span><span class="mtk1">, </span><span class="mtk8">"products/detail.html"</span><span class="mtk1">, {</span><span class="mtk8">"object"</span><span class="mtk1">: </span><span class="mtk9">obj</span><span class="mtk1">})</span></span><br></div></code></pre></pre>
<p class="p__1qg33Igem5pAgn4kPMirjw">In the example above we’re looking for a specific product by <code class="code__2rdF32qjRVp7mMVBHuPwDS">id</code> within the <code class="code__2rdF32qjRVp7mMVBHuPwDS">try</code> block. If we’re unable to find the product, the <code class="code__2rdF32qjRVp7mMVBHuPwDS">except</code> block is executed. The <code class="code__2rdF32qjRVp7mMVBHuPwDS">except</code> block is using the <a target="_blank" rel="noopener" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://docs.djangoproject.com/en/3.1/ref/models/class/#django.db.models.Model.DoesNotExist"><code class="code__2rdF32qjRVp7mMVBHuPwDS">DoesNotExist</code></a> exception which is raised when an object is not found for the given arguments of a query. However, if the object is found, we return the page that the user is looking for. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Generally, Django handles a lot of 404 errors for us, but it’s good to know how to implement logic when the need arises!</p>
</div></div></div>


<h3>Instructions</h3>

<div><div aria-hidden="false"><div class="checkpoint__4BHU1WTSxj6VwmNAYRwAn" data-testid="checkpoint-satisfied"><b class="checkpointNumber__31eTdII4vTq3Axat9vAk4l">1.</b><div class="checkpointBody__1H24X3oapbMTCVrjYQ07xN"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__32VfO5X72_8Hgq-lL1FiEX"><p class="p__1qg33Igem5pAgn4kPMirjw">Let’s first by importing the <code class="code__2rdF32qjRVp7mMVBHuPwDS">Http404</code> class from <code class="code__2rdF32qjRVp7mMVBHuPwDS">django.http</code> near the top of <strong>views.py</strong>. </p>
</div></div></div><div class="checkpointCheckbox__2jb1qr-RgojJrXjQnCdSZB checkboxSatisfied__3GbJB-7urIzf9cVW-5ASm6"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 2 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div></div><div aria-hidden="false"><div class="checkpoint__4BHU1WTSxj6VwmNAYRwAn" data-testid="checkpoint-satisfied"><b class="checkpointNumber__31eTdII4vTq3Axat9vAk4l">2.</b><div class="checkpointBody__1H24X3oapbMTCVrjYQ07xN"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__32VfO5X72_8Hgq-lL1FiEX"><p class="p__1qg33Igem5pAgn4kPMirjw">For practice, let’s force a <code class="code__2rdF32qjRVp7mMVBHuPwDS">404</code> page in our <code class="code__2rdF32qjRVp7mMVBHuPwDS">home()</code> view function!</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Notice that we’re trying to retrieve a specific pet from our database in the line:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-python" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk9">found_pet</span><span class="mtk1"> =&nbsp;</span><span class="mtk9">Patient</span><span class="mtk1">.</span><span class="mtk10">objects</span><span class="mtk9">.</span><span class="mtk10">get</span><span class="mtk1">(</span><span class="mtk9">pk</span><span class="mtk1">=</span><span class="mtk9">1</span><span class="mtk1">)</span></span><br></div></code></pre></pre>
<p class="p__1qg33Igem5pAgn4kPMirjw">Create a <code class="code__2rdF32qjRVp7mMVBHuPwDS">try</code>/<code class="code__2rdF32qjRVp7mMVBHuPwDS">except</code> block that has:</p>
<ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Move the <code class="code__2rdF32qjRVp7mMVBHuPwDS">found_pet = Patient.objects.get(pk=1)</code> inside the <code class="code__2rdF32qjRVp7mMVBHuPwDS">try</code> block</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">The <code class="code__2rdF32qjRVp7mMVBHuPwDS">except</code> condition being <code class="code__2rdF32qjRVp7mMVBHuPwDS">Patient.DoesNotExist</code></li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Inside the <code class="code__2rdF32qjRVp7mMVBHuPwDS">except</code> block, raise the <code class="code__2rdF32qjRVp7mMVBHuPwDS">Http404()</code> exception</li>
</ul>
</div></div></div><div class="checkpointCheckbox__2jb1qr-RgojJrXjQnCdSZB checkboxSatisfied__3GbJB-7urIzf9cVW-5ASm6"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 3 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__AUYYhFg5_aKE6p4-XN_JN"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__oSo2-lFMgoXgm-op6UgwW">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div><div aria-hidden="false"><div class="checkpoint__4BHU1WTSxj6VwmNAYRwAn" data-testid="checkpoint-satisfied"><b class="checkpointNumber__31eTdII4vTq3Axat9vAk4l">3.</b><div class="checkpointBody__1H24X3oapbMTCVrjYQ07xN"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__32VfO5X72_8Hgq-lL1FiEX"><p class="p__1qg33Igem5pAgn4kPMirjw">You can now force the error by changing the <code class="code__2rdF32qjRVp7mMVBHuPwDS">Patient.objects.get()</code> argument from <code class="code__2rdF32qjRVp7mMVBHuPwDS">pk=1</code> to <code class="code__2rdF32qjRVp7mMVBHuPwDS">pk=4</code> (or higher), since there are only 3 <code class="code__2rdF32qjRVp7mMVBHuPwDS">Patient</code> instances currently in the database. </p>
</div></div></div><div class="checkpointCheckbox__2jb1qr-RgojJrXjQnCdSZB checkboxSatisfied__3GbJB-7urIzf9cVW-5ASm6"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 4 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__AUYYhFg5_aKE6p4-XN_JN"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__oSo2-lFMgoXgm-op6UgwW">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div><div aria-hidden="false"><div class="checkpoint__4BHU1WTSxj6VwmNAYRwAn" data-testid="checkpoint-satisfied"><b class="checkpointNumber__31eTdII4vTq3Axat9vAk4l">4.</b><div class="checkpointBody__1H24X3oapbMTCVrjYQ07xN"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__32VfO5X72_8Hgq-lL1FiEX"><p class="p__1qg33Igem5pAgn4kPMirjw">So far the page doesn’t look any different from the other pages you might have seen when you’ve encountered an error! That’s because <strong>settings.py</strong> has a variable <code class="code__2rdF32qjRVp7mMVBHuPwDS">DEBUG</code> set as <code class="code__2rdF32qjRVp7mMVBHuPwDS">True</code>. This setting really helps give detailed errors you can use to debug your app — but it’s not good for <a target="_blank" rel="noopener" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/#debug">use in production</a>. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">However, to see how your page will look like to a user, open up <strong>settings.py</strong> and set <code class="code__2rdF32qjRVp7mMVBHuPwDS">DEBUG</code> to <code class="code__2rdF32qjRVp7mMVBHuPwDS">False</code>. Refresh the page to see the default 404 page for Django. </p>
</div></div></div><div class="checkpointCheckbox__2jb1qr-RgojJrXjQnCdSZB checkboxSatisfied__3GbJB-7urIzf9cVW-5ASm6"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 5 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__AUYYhFg5_aKE6p4-XN_JN"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__oSo2-lFMgoXgm-op6UgwW">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div></div>


<h3>Solution</h3>




<h1>Learn</h1>

<div class="gamut-1h3qpnn-Box ebnwbv90"><div aria-hidden="true" class="gamut-haybot-Text e8i0p5k0">Views</div><span aria-hidden="true" class="gamut-yj8jvy-Text e8i0p5k0">Updating URLs in Templates</span><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__32VfO5X72_8Hgq-lL1FiEX"><p class="p__1qg33Igem5pAgn4kPMirjw">When writing out paths in our URLConf, we looked into how to add a class-based view to be used in our paths. Consider the following piece of code: </p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-python" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk9">urlpatterns</span><span class="mtk1"> =&nbsp;[</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk9">path</span><span class="mtk1">(</span><span class="mtk8">"books/"</span><span class="mtk1">, </span><span class="mtk9">views</span><span class="mtk1">.</span><span class="mtk10">BookList</span><span class="mtk9">.</span><span class="mtk10">as_view</span><span class="mtk1">(), </span><span class="mtk9">name</span><span class="mtk1">=</span><span class="mtk8">"booklist"</span><span class="mtk1">),</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk9">path</span><span class="mtk1">(</span><span class="mtk8">"books/update/&lt;pk&gt;"</span><span class="mtk1">, </span><span class="mtk9">views</span><span class="mtk1">.</span><span class="mtk10">BookUpdate</span><span class="mtk9">.</span><span class="mtk10">as_view</span><span class="mtk1">(), </span><span class="mtk9">name</span><span class="mtk1">=</span><span class="mtk8">"bookupdate"</span><span class="mtk1">)</span></span><br><span><span class="mtk1">]</span></span><br></div></code></pre></pre>
<p class="p__1qg33Igem5pAgn4kPMirjw">In the example above, we have a class-based view called <code class="code__2rdF32qjRVp7mMVBHuPwDS">BookList</code> with the name attribute: <code class="code__2rdF32qjRVp7mMVBHuPwDS">"booklist"</code>. When using class-based views, Django is smart enough to look into our <strong>template/</strong> folder for an HTML file of the snake-case version of the same name (i.e <strong>book_list.html</strong> instead of <strong>BookList.html</strong>). We know that this template is given information from the view, but how do we access this information?</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Within our template, we’ll be able to retrieve all of the records in our database through the <code class="code__2rdF32qjRVp7mMVBHuPwDS">BookList</code> class:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-html" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk16">&lt;!-- /templates/book_list.html --&gt;</span></span><br><span><span> </span></span><br><span><span class="mtk1">{% for book in book_list %}</span></span><br><span><span class="mtk4">&lt;tr&gt;</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk4">&lt;td&gt;</span><span class="mtk1">{{ book.title }} </span><span class="mtk4">&lt;/td&gt;</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk4">&lt;td&gt;</span><span class="mtk1">{{ book.author }} </span><span class="mtk4">&lt;/td&gt;</span></span><br><span><span class="mtk4">&lt;/tr&gt;</span></span><br><span><span class="mtk1">{% endfor %}</span></span><br></div></code></pre></pre>
<p class="p__1qg33Igem5pAgn4kPMirjw">In the example above, we’re looping over all our book objects in our database, and by using interpolation we can access attributes from each book such as <code class="code__2rdF32qjRVp7mMVBHuPwDS">author</code> and <code class="code__2rdF32qjRVp7mMVBHuPwDS">title</code>.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">We also looked in a previous exercise how we can make use of the primary key in dynamic URLs. Let’s assume we want to have a link attached to each book in order to delete it from the list and our database. In this case, we can make use of the <code class="code__2rdF32qjRVp7mMVBHuPwDS">name</code> attribute from our book update path.</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-html" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk16">&lt;!-- /templates/book_list.html --&gt;</span></span><br><span><span> </span></span><br><span><span class="mtk1">{% for book in book_list %}</span></span><br><span><span class="mtk4">&lt;tr&gt;</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk4">&lt;td&gt;</span><span class="mtk1">{{ book.title }} </span><span class="mtk4">&lt;/td&gt;</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk4">&lt;td&gt;</span><span class="mtk1">{{ book.author }} </span><span class="mtk4">&lt;/td&gt;</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk4">&lt;td&gt;&lt;a</span><span class="mtk1"> </span><span class="mtk7">href</span><span class="mtk1">=</span><span class="mtk8">"{% url 'bookupdate' book.id %}"</span><span class="mtk4">&gt;&lt;button&gt;</span><span class="mtk1">Update</span><span class="mtk4">&lt;/button&gt;&lt;/a&gt;&lt;/td&gt;</span></span><br><span><span class="mtk4">&lt;/tr&gt;</span></span><br><span><span class="mtk1">{% endfor %}</span></span><br></div></code></pre></pre>
<p class="p__1qg33Igem5pAgn4kPMirjw">Notice the <code class="code__2rdF32qjRVp7mMVBHuPwDS">&lt;a&gt;</code> element is using Python’s template for the <code class="code__2rdF32qjRVp7mMVBHuPwDS">href</code> attribute. In this case, we’re adding the value used for the <code class="code__2rdF32qjRVp7mMVBHuPwDS">name</code> attribute in our URLConf: <code class="code__2rdF32qjRVp7mMVBHuPwDS">bookupdate</code>. Moreover, we’re able to specify which book we want to update by accessing its <code class="code__2rdF32qjRVp7mMVBHuPwDS">id</code> attribute. </p>
</div></div></div>


<h3>Instructions</h3>

<div><div aria-hidden="false"><div class="checkpoint__4BHU1WTSxj6VwmNAYRwAn" data-testid="checkpoint-satisfied"><b class="checkpointNumber__31eTdII4vTq3Axat9vAk4l">1.</b><div class="checkpointBody__1H24X3oapbMTCVrjYQ07xN"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__32VfO5X72_8Hgq-lL1FiEX"><p class="p__1qg33Igem5pAgn4kPMirjw">You’ve seen how the <code class="code__2rdF32qjRVp7mMVBHuPwDS">owner/list</code> page should look like in a previous exercise. But to practice updating URLs in links, let’s try implementing the update and delete from scratch.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">In <strong>owner_list.html</strong>, there is a loop going over all the <code class="code__2rdF32qjRVp7mMVBHuPwDS">Owner</code> instances. Currently, the page contains rows of basic information. Inside the <code class="code__2rdF32qjRVp7mMVBHuPwDS">&lt;tr&gt;</code> that displays information, you now have to:</p>
<ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Add another <code class="code__2rdF32qjRVp7mMVBHuPwDS">&lt;td&gt;</code> </li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Inside the <code class="code__2rdF32qjRVp7mMVBHuPwDS">&lt;td&gt;</code> add a <code class="code__2rdF32qjRVp7mMVBHuPwDS">&lt;a&gt;</code> element</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">The <code class="code__2rdF32qjRVp7mMVBHuPwDS">&lt;a&gt;</code>‘s <code class="code__2rdF32qjRVp7mMVBHuPwDS">href</code> should use the <code class="code__2rdF32qjRVp7mMVBHuPwDS">{% url %}</code> tag<ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Provide the tag with the <code class="code__2rdF32qjRVp7mMVBHuPwDS">'ownerupdate'</code> template</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Use <code class="code__2rdF32qjRVp7mMVBHuPwDS">owner.id</code> as the argument</li>
</ul>
</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">The <code class="code__2rdF32qjRVp7mMVBHuPwDS">&lt;a&gt;</code>‘s text should say <code class="code__2rdF32qjRVp7mMVBHuPwDS">Edit</code></li>
</ul>
</div></div></div><div class="checkpointCheckbox__2jb1qr-RgojJrXjQnCdSZB checkboxSatisfied__3GbJB-7urIzf9cVW-5ASm6"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 2 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__AUYYhFg5_aKE6p4-XN_JN"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__oSo2-lFMgoXgm-op6UgwW">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div><div aria-hidden="false"><div class="checkpoint__4BHU1WTSxj6VwmNAYRwAn" data-testid="checkpoint-satisfied"><b class="checkpointNumber__31eTdII4vTq3Axat9vAk4l">2.</b><div class="checkpointBody__1H24X3oapbMTCVrjYQ07xN"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__32VfO5X72_8Hgq-lL1FiEX"><p class="p__1qg33Igem5pAgn4kPMirjw">The update link set up, now do the same to set up a delete link! The text in this new link should display <code class="code__2rdF32qjRVp7mMVBHuPwDS">Delete</code>. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Once you’re done, try clicking on the links to see how you’ve used dynamic links in your URLs! </p>
</div></div></div><div class="checkpointCheckbox__2jb1qr-RgojJrXjQnCdSZB checkboxSatisfied__3GbJB-7urIzf9cVW-5ASm6"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 3 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__AUYYhFg5_aKE6p4-XN_JN"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__oSo2-lFMgoXgm-op6UgwW">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div></div>


<h3>Solution</h3>




<h1>Learn</h1>

<div class="gamut-1h3qpnn-Box ebnwbv90"><div aria-hidden="true" class="gamut-haybot-Text e8i0p5k0">Views</div><span aria-hidden="true" class="gamut-yj8jvy-Text e8i0p5k0">Review</span><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__32VfO5X72_8Hgq-lL1FiEX"><p class="p__1qg33Igem5pAgn4kPMirjw">Way to go! We’ve explored tools and built-in functionalities that Django provides when working with views. So far we’ve learned how to:</p>
<ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Create view functions within the appropriate <code class="code__2rdF32qjRVp7mMVBHuPwDS">views.py</code> file:</li>
</ul>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-python" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk12">def home_view</span><span class="mtk1">(</span><span class="mtk9">request</span><span class="mtk1">):</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk9">name</span><span class="mtk1"> =&nbsp;</span><span class="mtk8">"Tom"</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk9">text</span><span class="mtk1"> =&nbsp;</span><span class="mtk9">f</span><span class="mtk8">"&lt;h1&gt;My name is {name}&lt;/h1&gt;"</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk12">return</span><span class="mtk1"> </span><span class="mtk9">HttpResponse</span><span class="mtk1">(</span><span class="mtk9">text</span><span class="mtk1">)</span></span><br></div></code></pre></pre>
<ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Explored how to use class-based views:</li>
</ul>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-python" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk12">class OwnerList</span><span class="mtk1">(</span><span class="mtk9">Listview</span><span class="mtk1">):</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk9">model</span><span class="mtk1"> =&nbsp;</span><span class="mtk9">Owner</span></span><br></div></code></pre></pre>
<ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Attach the view function to a route <strong>urls.py</strong> file:</li>
</ul>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-python" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk9">urlpatterns</span><span class="mtk1"> =&nbsp;[</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk9">path</span><span class="mtk1">(</span><span class="mtk8">"catalogue/"</span><span class="mtk1">, </span><span class="mtk9">views</span><span class="mtk1">.</span><span class="mtk10">Catalogue</span><span class="mtk9">.</span><span class="mtk10">as_view</span><span class="mtk1">(), </span><span class="mtk9">name</span><span class="mtk1">=</span><span class="mtk8">"catalogue"</span><span class="mtk1">),</span></span><br><span><span class="mtk1">]</span></span><br></div></code></pre></pre>
<ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">How to access data rendered into a template:</li>
</ul>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-html" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk16">&lt;!-- /templates/book_list.html --&gt;</span></span><br><span><span> </span></span><br><span><span class="mtk1">{% for book in book_list %}</span></span><br><span><span class="mtk4">&lt;tr&gt;</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk4">&lt;td&gt;</span><span class="mtk1">{{ book.title }} </span><span class="mtk4">&lt;/td&gt;</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk4">&lt;td&gt;</span><span class="mtk1">{{ book.author }} </span><span class="mtk4">&lt;/td&gt;</span></span><br><span><span class="mtk4">&lt;/tr&gt;</span></span><br></div></code></pre></pre>
<ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Make use of Django’s default 404 page with <code class="code__2rdF32qjRVp7mMVBHuPwDS">Http404</code>.</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Used dynamic URLs in templates and made use of specific views.</li>
</ul>
<p class="p__1qg33Igem5pAgn4kPMirjw">Django’s is a swiss army of tools, so if you’d like to learn more about what can be done with Django feel free to look at the main <a target="_blank" rel="noopener" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://docs.djangoproject.com/en/3.1/">documentation</a>. </p>
</div></div></div>


<h3>Instructions</h3>

<div><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__32VfO5X72_8Hgq-lL1FiEX body__sLYJ9fiYXLTCz2YhxIaHE"><p class="p__1qg33Igem5pAgn4kPMirjw">We provided you with a sandbox in order to experiment with different toolsets that Django can provide. Explore what other <a target="_blank" rel="noopener" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://docs.djangoproject.com/en/3.1/topics/class-based-views/generic-display/">generic views</a> you can use, and challenge yourself further by adding other templates that you might find useful!</p>
</div></div></div>


<h3>Solution</h3>




<h1>Learn</h1>

<div class="gamut-1h3qpnn-Box ebnwbv90"><div aria-hidden="true" class="gamut-haybot-Text e8i0p5k0">Build Python Web Apps with Django</div><span aria-hidden="true" class="gamut-yj8jvy-Text e8i0p5k0">The Django Djitney</span><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__32VfO5X72_8Hgq-lL1FiEX"><p class="p__1qg33Igem5pAgn4kPMirjw">The Codes-ville Official Department of Transportation needs your help! They recently finished building the routes for their new commuter train, the Django Djitney, and need someone to create an easy-to-use site for commuters to be able to see the train routes. They’ve supplied the train routes in a database, but they need your help to create a site that they can use to show the different routes across all the stations, as well as update them when there are changes in the routes.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Each jitney line takes different routes through the stations. You can take a look through <strong>models.py</strong> to see how each model relates to each other. But the basic breakdown is that a “stop” consists of a “line”, a “station”, and a “stop number”. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">The town wishes to have the ability to view, edit, update, and delete lines, stops, and stations. They’ve outsourced the creation of the templates, and they’ve supplied the models on their own. All you’ll need to do is create the views and link them up to the templates.</p>
</div></div><div class="group__1w9ZdszLiIgvZMQw2AiGJB"><span class="noUnderline__1DujYZeohdnOrK9vnT5gfM"><button data-testid="start-btn" class="ehu8l140 gamut-1ybua7w-ResetElement-createButtonComponent-YellowButton e1bhhzie0" type="button" role="button">Start</button></span></div></div>


<h3>Solution</h3>




